// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: mdHistory.proto

package mdHistoryUju

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FutureHisTickService_QueryFutureHisTick_FullMethodName = "/example.FutureHisTickService/queryFutureHisTick"
	FutureHisTickService_QueryStockHisTick_FullMethodName  = "/example.FutureHisTickService/queryStockHisTick"
)

// FutureHisTickServiceClient is the client API for FutureHisTickService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FutureHisTickServiceClient interface {
	// 查询期货期权历史行情
	QueryFutureHisTick(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// 查询股票历史行情
	QueryStockHisTick(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type futureHisTickServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFutureHisTickServiceClient(cc grpc.ClientConnInterface) FutureHisTickServiceClient {
	return &futureHisTickServiceClient{cc}
}

func (c *futureHisTickServiceClient) QueryFutureHisTick(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, FutureHisTickService_QueryFutureHisTick_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *futureHisTickServiceClient) QueryStockHisTick(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, FutureHisTickService_QueryStockHisTick_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FutureHisTickServiceServer is the server API for FutureHisTickService service.
// All implementations must embed UnimplementedFutureHisTickServiceServer
// for forward compatibility
type FutureHisTickServiceServer interface {
	// 查询期货期权历史行情
	QueryFutureHisTick(context.Context, *Request) (*Response, error)
	// 查询股票历史行情
	QueryStockHisTick(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedFutureHisTickServiceServer()
}

// UnimplementedFutureHisTickServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFutureHisTickServiceServer struct {
}

func (UnimplementedFutureHisTickServiceServer) QueryFutureHisTick(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryFutureHisTick not implemented")
}
func (UnimplementedFutureHisTickServiceServer) QueryStockHisTick(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryStockHisTick not implemented")
}
func (UnimplementedFutureHisTickServiceServer) mustEmbedUnimplementedFutureHisTickServiceServer() {}

// UnsafeFutureHisTickServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FutureHisTickServiceServer will
// result in compilation errors.
type UnsafeFutureHisTickServiceServer interface {
	mustEmbedUnimplementedFutureHisTickServiceServer()
}

func RegisterFutureHisTickServiceServer(s grpc.ServiceRegistrar, srv FutureHisTickServiceServer) {
	s.RegisterService(&FutureHisTickService_ServiceDesc, srv)
}

func _FutureHisTickService_QueryFutureHisTick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FutureHisTickServiceServer).QueryFutureHisTick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FutureHisTickService_QueryFutureHisTick_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FutureHisTickServiceServer).QueryFutureHisTick(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _FutureHisTickService_QueryStockHisTick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FutureHisTickServiceServer).QueryStockHisTick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FutureHisTickService_QueryStockHisTick_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FutureHisTickServiceServer).QueryStockHisTick(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// FutureHisTickService_ServiceDesc is the grpc.ServiceDesc for FutureHisTickService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FutureHisTickService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "example.FutureHisTickService",
	HandlerType: (*FutureHisTickServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "queryFutureHisTick",
			Handler:    _FutureHisTickService_QueryFutureHisTick_Handler,
		},
		{
			MethodName: "queryStockHisTick",
			Handler:    _FutureHisTickService_QueryStockHisTick_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mdHistory.proto",
}
