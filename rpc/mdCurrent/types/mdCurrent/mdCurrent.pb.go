// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.20.3
// source: mdCurrent.proto

package mdCurrent

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Header_Type int32

const (
	Header_SERVICE_REQ    Header_Type = 0 // 接口请求
	Header_SERVICE_RESP   Header_Type = 1 // 接口响应
	Header_ONE_WAY        Header_Type = 2 // 单向请求
	Header_LOGIN_REQ      Header_Type = 3 // 登录请求
	Header_LOGIN_RESP     Header_Type = 4 // 登录响应
	Header_HEARTBEAT_REQ  Header_Type = 5 //  心跳请求
	Header_HEARTBEAT_RESP Header_Type = 6 // 心跳响应
)

// Enum value maps for Header_Type.
var (
	Header_Type_name = map[int32]string{
		0: "SERVICE_REQ",
		1: "SERVICE_RESP",
		2: "ONE_WAY",
		3: "LOGIN_REQ",
		4: "LOGIN_RESP",
		5: "HEARTBEAT_REQ",
		6: "HEARTBEAT_RESP",
	}
	Header_Type_value = map[string]int32{
		"SERVICE_REQ":    0,
		"SERVICE_RESP":   1,
		"ONE_WAY":        2,
		"LOGIN_REQ":      3,
		"LOGIN_RESP":     4,
		"HEARTBEAT_REQ":  5,
		"HEARTBEAT_RESP": 6,
	}
)

func (x Header_Type) Enum() *Header_Type {
	p := new(Header_Type)
	*p = x
	return p
}

func (x Header_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Header_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_mdCurrent_proto_enumTypes[0].Descriptor()
}

func (Header_Type) Type() protoreflect.EnumType {
	return &file_mdCurrent_proto_enumTypes[0]
}

func (x Header_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Header_Type.Descriptor instead.
func (Header_Type) EnumDescriptor() ([]byte, []int) {
	return file_mdCurrent_proto_rawDescGZIP(), []int{1, 0}
}

type LoginRespMessage_LoginResult int32

const (
	LoginRespMessage_SUCCESS LoginRespMessage_LoginResult = 0 // 登录成功标识
	LoginRespMessage_FAIL    LoginRespMessage_LoginResult = 1 // 登录失败
)

// Enum value maps for LoginRespMessage_LoginResult.
var (
	LoginRespMessage_LoginResult_name = map[int32]string{
		0: "SUCCESS",
		1: "FAIL",
	}
	LoginRespMessage_LoginResult_value = map[string]int32{
		"SUCCESS": 0,
		"FAIL":    1,
	}
)

func (x LoginRespMessage_LoginResult) Enum() *LoginRespMessage_LoginResult {
	p := new(LoginRespMessage_LoginResult)
	*p = x
	return p
}

func (x LoginRespMessage_LoginResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoginRespMessage_LoginResult) Descriptor() protoreflect.EnumDescriptor {
	return file_mdCurrent_proto_enumTypes[1].Descriptor()
}

func (LoginRespMessage_LoginResult) Type() protoreflect.EnumType {
	return &file_mdCurrent_proto_enumTypes[1]
}

func (x LoginRespMessage_LoginResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoginRespMessage_LoginResult.Descriptor instead.
func (LoginRespMessage_LoginResult) EnumDescriptor() ([]byte, []int) {
	return file_mdCurrent_proto_rawDescGZIP(), []int{3, 0}
}

type NettyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header              *Header                `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	LoginReqMessage     *LoginReqMessage       `protobuf:"bytes,2,opt,name=loginReqMessage,proto3" json:"loginReqMessage,omitempty"`
	LoginRespMessage    *LoginRespMessage      `protobuf:"bytes,3,opt,name=loginRespMessage,proto3" json:"loginRespMessage,omitempty"`
	BusinessReqMessage  *BusinessReqMessage    `protobuf:"bytes,4,opt,name=businessReqMessage,proto3" json:"businessReqMessage,omitempty"`
	BusinessRespMessage []*BusinessRespMessage `protobuf:"bytes,5,rep,name=businessRespMessage,proto3" json:"businessRespMessage,omitempty"`
}

func (x *NettyMessage) Reset() {
	*x = NettyMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdCurrent_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NettyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NettyMessage) ProtoMessage() {}

func (x *NettyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_mdCurrent_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NettyMessage.ProtoReflect.Descriptor instead.
func (*NettyMessage) Descriptor() ([]byte, []int) {
	return file_mdCurrent_proto_rawDescGZIP(), []int{0}
}

func (x *NettyMessage) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *NettyMessage) GetLoginReqMessage() *LoginReqMessage {
	if x != nil {
		return x.LoginReqMessage
	}
	return nil
}

func (x *NettyMessage) GetLoginRespMessage() *LoginRespMessage {
	if x != nil {
		return x.LoginRespMessage
	}
	return nil
}

func (x *NettyMessage) GetBusinessReqMessage() *BusinessReqMessage {
	if x != nil {
		return x.BusinessReqMessage
	}
	return nil
}

func (x *NettyMessage) GetBusinessRespMessage() []*BusinessRespMessage {
	if x != nil {
		return x.BusinessRespMessage
	}
	return nil
}

type Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrcCode   int32       `protobuf:"varint,1,opt,name=crcCode,proto3" json:"crcCode,omitempty"`     //
	Length    int32       `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`       //
	SessionID int64       `protobuf:"varint,3,opt,name=sessionID,proto3" json:"sessionID,omitempty"` //
	Type      Header_Type `protobuf:"varint,4,opt,name=type,proto3,enum=mdCurrent.Header_Type" json:"type,omitempty"`
	Priority  []byte      `protobuf:"bytes,5,opt,name=priority,proto3" json:"priority,omitempty"` //
}

func (x *Header) Reset() {
	*x = Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdCurrent_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_mdCurrent_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_mdCurrent_proto_rawDescGZIP(), []int{1}
}

func (x *Header) GetCrcCode() int32 {
	if x != nil {
		return x.CrcCode
	}
	return 0
}

func (x *Header) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *Header) GetSessionID() int64 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *Header) GetType() Header_Type {
	if x != nil {
		return x.Type
	}
	return Header_SERVICE_REQ
}

func (x *Header) GetPriority() []byte {
	if x != nil {
		return x.Priority
	}
	return nil
}

type LoginReqMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"` // 登录用户名
	Passwd   string `protobuf:"bytes,2,opt,name=passwd,proto3" json:"passwd,omitempty"`     // 密码 需md5加密
}

func (x *LoginReqMessage) Reset() {
	*x = LoginReqMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdCurrent_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginReqMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginReqMessage) ProtoMessage() {}

func (x *LoginReqMessage) ProtoReflect() protoreflect.Message {
	mi := &file_mdCurrent_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginReqMessage.ProtoReflect.Descriptor instead.
func (*LoginReqMessage) Descriptor() ([]byte, []int) {
	return file_mdCurrent_proto_rawDescGZIP(), []int{2}
}

func (x *LoginReqMessage) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LoginReqMessage) GetPasswd() string {
	if x != nil {
		return x.Passwd
	}
	return ""
}

// login response
type LoginRespMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoginResult LoginRespMessage_LoginResult `protobuf:"varint,1,opt,name=loginResult,proto3,enum=mdCurrent.LoginRespMessage_LoginResult" json:"loginResult,omitempty"`
}

func (x *LoginRespMessage) Reset() {
	*x = LoginRespMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdCurrent_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginRespMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRespMessage) ProtoMessage() {}

func (x *LoginRespMessage) ProtoReflect() protoreflect.Message {
	mi := &file_mdCurrent_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRespMessage.ProtoReflect.Descriptor instead.
func (*LoginRespMessage) Descriptor() ([]byte, []int) {
	return file_mdCurrent_proto_rawDescGZIP(), []int{3}
}

func (x *LoginRespMessage) GetLoginResult() LoginRespMessage_LoginResult {
	if x != nil {
		return x.LoginResult
	}
	return LoginRespMessage_SUCCESS
}

// business req
type BusinessReqMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StockCodes   []string `protobuf:"bytes,1,rep,name=stockCodes,proto3" json:"stockCodes,omitempty"`      //股票代码
	Types        []int32  `protobuf:"varint,2,rep,packed,name=types,proto3" json:"types,omitempty"`        // -91 行情 -92 指数 -89 逐笔成交 -87 逐笔委托 -86 逐笔tick
	BusinessType int32    `protobuf:"varint,3,opt,name=businessType,proto3" json:"businessType,omitempty"` //
}

func (x *BusinessReqMessage) Reset() {
	*x = BusinessReqMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdCurrent_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessReqMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessReqMessage) ProtoMessage() {}

func (x *BusinessReqMessage) ProtoReflect() protoreflect.Message {
	mi := &file_mdCurrent_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessReqMessage.ProtoReflect.Descriptor instead.
func (*BusinessReqMessage) Descriptor() ([]byte, []int) {
	return file_mdCurrent_proto_rawDescGZIP(), []int{4}
}

func (x *BusinessReqMessage) GetStockCodes() []string {
	if x != nil {
		return x.StockCodes
	}
	return nil
}

func (x *BusinessReqMessage) GetTypes() []int32 {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *BusinessReqMessage) GetBusinessType() int32 {
	if x != nil {
		return x.BusinessType
	}
	return 0
}

type BusinessRespMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataType              int32                      `protobuf:"varint,11,opt,name=dataType,proto3" json:"dataType,omitempty"`
	UjuTdfBbqbidData      []*UJU_TDF_BBQBID_DATA     `protobuf:"bytes,1,rep,name=uju_tdf_bbqbid_data,json=ujuTdfBbqbidData,proto3" json:"uju_tdf_bbqbid_data,omitempty"`
	UjuTdfBbqtransaction  []*UJU_TDF_BBQTRANSACTION  `protobuf:"bytes,2,rep,name=uju_tdf_bbqtransaction,json=ujuTdfBbqtransaction,proto3" json:"uju_tdf_bbqtransaction,omitempty"`
	UjuTdfBrokerQueue     []*UJU_TDF_BROKER_QUEUE    `protobuf:"bytes,3,rep,name=uju_tdf_broker_queue,json=ujuTdfBrokerQueue,proto3" json:"uju_tdf_broker_queue,omitempty"`
	UjuTdfFutureData      []*UJU_TDF_FUTURE_DATA     `protobuf:"bytes,4,rep,name=uju_tdf_future_data,json=ujuTdfFutureData,proto3" json:"uju_tdf_future_data,omitempty"`
	UjuTdfIndexData       []*UJU_TDF_INDEX_DATA      `protobuf:"bytes,5,rep,name=uju_tdf_index_data,json=ujuTdfIndexData,proto3" json:"uju_tdf_index_data,omitempty"`
	UjuTdfMarketCloseData *UJU_TDF_MARKET_CLOSE_DATA `protobuf:"bytes,6,opt,name=uju_tdf_market_close_data,json=ujuTdfMarketCloseData,proto3" json:"uju_tdf_market_close_data,omitempty"`
	UjuTdfMarketData      []*UJU_TDF_MARKET_DATA     `protobuf:"bytes,7,rep,name=uju_tdf_market_data,json=ujuTdfMarketData,proto3" json:"uju_tdf_market_data,omitempty"`
	UjuTdfOrderQueue      []*UJU_TDF_ORDER_QUEUE     `protobuf:"bytes,8,rep,name=uju_tdf_order_queue,json=ujuTdfOrderQueue,proto3" json:"uju_tdf_order_queue,omitempty"`
	UjuTdfOrder           []*UJU_TDF_ORDER           `protobuf:"bytes,9,rep,name=uju_tdf_order,json=ujuTdfOrder,proto3" json:"uju_tdf_order,omitempty"`
	UjuTdfTransaction     []*UJU_TDF_TRANSACTION     `protobuf:"bytes,10,rep,name=uju_tdf_transaction,json=ujuTdfTransaction,proto3" json:"uju_tdf_transaction,omitempty"`
	Stocks                []string                   `protobuf:"bytes,12,rep,name=stocks,proto3" json:"stocks,omitempty"` // the system now have
	UjuSsel2Transaction   []*UJU_SSEL2_Transaction   `protobuf:"bytes,13,rep,name=uju_ssel2_transaction,json=ujuSsel2Transaction,proto3" json:"uju_ssel2_transaction,omitempty"`
	UjuSsel2Order         []*UJU_SSEL2_Order         `protobuf:"bytes,14,rep,name=uju_ssel2_order,json=ujuSsel2Order,proto3" json:"uju_ssel2_order,omitempty"`
	UjuSsel2Bondtick      []*UJU_SSEL2_BondTick      `protobuf:"bytes,15,rep,name=uju_ssel2_bondtick,json=ujuSsel2Bondtick,proto3" json:"uju_ssel2_bondtick,omitempty"`
	UjuSzsel2Order        []*UJU_SZSEL2_Order        `protobuf:"bytes,16,rep,name=uju_szsel2_order,json=ujuSzsel2Order,proto3" json:"uju_szsel2_order,omitempty"`
	UjuSzsel2Transaction  []*UJU_SZSEL2_Transaction  `protobuf:"bytes,17,rep,name=uju_szsel2_transaction,json=ujuSzsel2Transaction,proto3" json:"uju_szsel2_transaction,omitempty"`
	UjuSzsel2Tick         []*UJU_SZSEL2_Tick         `protobuf:"bytes,18,rep,name=uju_szsel2_tick,json=ujuSzsel2Tick,proto3" json:"uju_szsel2_tick,omitempty"`
}

func (x *BusinessRespMessage) Reset() {
	*x = BusinessRespMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdCurrent_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessRespMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessRespMessage) ProtoMessage() {}

func (x *BusinessRespMessage) ProtoReflect() protoreflect.Message {
	mi := &file_mdCurrent_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessRespMessage.ProtoReflect.Descriptor instead.
func (*BusinessRespMessage) Descriptor() ([]byte, []int) {
	return file_mdCurrent_proto_rawDescGZIP(), []int{5}
}

func (x *BusinessRespMessage) GetDataType() int32 {
	if x != nil {
		return x.DataType
	}
	return 0
}

func (x *BusinessRespMessage) GetUjuTdfBbqbidData() []*UJU_TDF_BBQBID_DATA {
	if x != nil {
		return x.UjuTdfBbqbidData
	}
	return nil
}

func (x *BusinessRespMessage) GetUjuTdfBbqtransaction() []*UJU_TDF_BBQTRANSACTION {
	if x != nil {
		return x.UjuTdfBbqtransaction
	}
	return nil
}

func (x *BusinessRespMessage) GetUjuTdfBrokerQueue() []*UJU_TDF_BROKER_QUEUE {
	if x != nil {
		return x.UjuTdfBrokerQueue
	}
	return nil
}

func (x *BusinessRespMessage) GetUjuTdfFutureData() []*UJU_TDF_FUTURE_DATA {
	if x != nil {
		return x.UjuTdfFutureData
	}
	return nil
}

func (x *BusinessRespMessage) GetUjuTdfIndexData() []*UJU_TDF_INDEX_DATA {
	if x != nil {
		return x.UjuTdfIndexData
	}
	return nil
}

func (x *BusinessRespMessage) GetUjuTdfMarketCloseData() *UJU_TDF_MARKET_CLOSE_DATA {
	if x != nil {
		return x.UjuTdfMarketCloseData
	}
	return nil
}

func (x *BusinessRespMessage) GetUjuTdfMarketData() []*UJU_TDF_MARKET_DATA {
	if x != nil {
		return x.UjuTdfMarketData
	}
	return nil
}

func (x *BusinessRespMessage) GetUjuTdfOrderQueue() []*UJU_TDF_ORDER_QUEUE {
	if x != nil {
		return x.UjuTdfOrderQueue
	}
	return nil
}

func (x *BusinessRespMessage) GetUjuTdfOrder() []*UJU_TDF_ORDER {
	if x != nil {
		return x.UjuTdfOrder
	}
	return nil
}

func (x *BusinessRespMessage) GetUjuTdfTransaction() []*UJU_TDF_TRANSACTION {
	if x != nil {
		return x.UjuTdfTransaction
	}
	return nil
}

func (x *BusinessRespMessage) GetStocks() []string {
	if x != nil {
		return x.Stocks
	}
	return nil
}

func (x *BusinessRespMessage) GetUjuSsel2Transaction() []*UJU_SSEL2_Transaction {
	if x != nil {
		return x.UjuSsel2Transaction
	}
	return nil
}

func (x *BusinessRespMessage) GetUjuSsel2Order() []*UJU_SSEL2_Order {
	if x != nil {
		return x.UjuSsel2Order
	}
	return nil
}

func (x *BusinessRespMessage) GetUjuSsel2Bondtick() []*UJU_SSEL2_BondTick {
	if x != nil {
		return x.UjuSsel2Bondtick
	}
	return nil
}

func (x *BusinessRespMessage) GetUjuSzsel2Order() []*UJU_SZSEL2_Order {
	if x != nil {
		return x.UjuSzsel2Order
	}
	return nil
}

func (x *BusinessRespMessage) GetUjuSzsel2Transaction() []*UJU_SZSEL2_Transaction {
	if x != nil {
		return x.UjuSzsel2Transaction
	}
	return nil
}

func (x *BusinessRespMessage) GetUjuSzsel2Tick() []*UJU_SZSEL2_Tick {
	if x != nil {
		return x.UjuSzsel2Tick
	}
	return nil
}

// 1 BBQBID_DATA
type UJU_TDF_BBQBID_DATA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WindCode       string `protobuf:"bytes,1,opt,name=windCode,proto3" json:"windCode,omitempty"`
	ActionDay      int32  `protobuf:"varint,2,opt,name=actionDay,proto3" json:"actionDay,omitempty"`
	Time           int32  `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	Source         string `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	BidPrice       int64  `protobuf:"varint,5,opt,name=bidPrice,proto3" json:"bidPrice,omitempty"`
	BidVolume      int64  `protobuf:"varint,6,opt,name=bidVolume,proto3" json:"bidVolume,omitempty"`
	BidPriceStatus int64  `protobuf:"varint,7,opt,name=bidPriceStatus,proto3" json:"bidPriceStatus,omitempty"`
	IsBid          string `protobuf:"bytes,8,opt,name=isBid,proto3" json:"isBid,omitempty"`
	BidSpecialFlag string `protobuf:"bytes,9,opt,name=bidSpecialFlag,proto3" json:"bidSpecialFlag,omitempty"`
	BidStatus      string `protobuf:"bytes,10,opt,name=bidStatus,proto3" json:"bidStatus,omitempty"`
	OfrPrice       int64  `protobuf:"varint,11,opt,name=ofrPrice,proto3" json:"ofrPrice,omitempty"`
	OfrVolume      int64  `protobuf:"varint,12,opt,name=ofrVolume,proto3" json:"ofrVolume,omitempty"`
	OfrPriceStatus string `protobuf:"bytes,13,opt,name=ofrPriceStatus,proto3" json:"ofrPriceStatus,omitempty"`
	IsOfr          string `protobuf:"bytes,14,opt,name=isOfr,proto3" json:"isOfr,omitempty"`
	OfrSpecialFlag string `protobuf:"bytes,15,opt,name=ofrSpecialFlag,proto3" json:"ofrSpecialFlag,omitempty"`
	OfrStatus      string `protobuf:"bytes,16,opt,name=ofrStatus,proto3" json:"ofrStatus,omitempty"`
}

func (x *UJU_TDF_BBQBID_DATA) Reset() {
	*x = UJU_TDF_BBQBID_DATA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdCurrent_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UJU_TDF_BBQBID_DATA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UJU_TDF_BBQBID_DATA) ProtoMessage() {}

func (x *UJU_TDF_BBQBID_DATA) ProtoReflect() protoreflect.Message {
	mi := &file_mdCurrent_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UJU_TDF_BBQBID_DATA.ProtoReflect.Descriptor instead.
func (*UJU_TDF_BBQBID_DATA) Descriptor() ([]byte, []int) {
	return file_mdCurrent_proto_rawDescGZIP(), []int{6}
}

func (x *UJU_TDF_BBQBID_DATA) GetWindCode() string {
	if x != nil {
		return x.WindCode
	}
	return ""
}

func (x *UJU_TDF_BBQBID_DATA) GetActionDay() int32 {
	if x != nil {
		return x.ActionDay
	}
	return 0
}

func (x *UJU_TDF_BBQBID_DATA) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *UJU_TDF_BBQBID_DATA) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *UJU_TDF_BBQBID_DATA) GetBidPrice() int64 {
	if x != nil {
		return x.BidPrice
	}
	return 0
}

func (x *UJU_TDF_BBQBID_DATA) GetBidVolume() int64 {
	if x != nil {
		return x.BidVolume
	}
	return 0
}

func (x *UJU_TDF_BBQBID_DATA) GetBidPriceStatus() int64 {
	if x != nil {
		return x.BidPriceStatus
	}
	return 0
}

func (x *UJU_TDF_BBQBID_DATA) GetIsBid() string {
	if x != nil {
		return x.IsBid
	}
	return ""
}

func (x *UJU_TDF_BBQBID_DATA) GetBidSpecialFlag() string {
	if x != nil {
		return x.BidSpecialFlag
	}
	return ""
}

func (x *UJU_TDF_BBQBID_DATA) GetBidStatus() string {
	if x != nil {
		return x.BidStatus
	}
	return ""
}

func (x *UJU_TDF_BBQBID_DATA) GetOfrPrice() int64 {
	if x != nil {
		return x.OfrPrice
	}
	return 0
}

func (x *UJU_TDF_BBQBID_DATA) GetOfrVolume() int64 {
	if x != nil {
		return x.OfrVolume
	}
	return 0
}

func (x *UJU_TDF_BBQBID_DATA) GetOfrPriceStatus() string {
	if x != nil {
		return x.OfrPriceStatus
	}
	return ""
}

func (x *UJU_TDF_BBQBID_DATA) GetIsOfr() string {
	if x != nil {
		return x.IsOfr
	}
	return ""
}

func (x *UJU_TDF_BBQBID_DATA) GetOfrSpecialFlag() string {
	if x != nil {
		return x.OfrSpecialFlag
	}
	return ""
}

func (x *UJU_TDF_BBQBID_DATA) GetOfrStatus() string {
	if x != nil {
		return x.OfrStatus
	}
	return ""
}

// 2 BBQTRANSACTION
type UJU_TDF_BBQTRANSACTION struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WindCode    string `protobuf:"bytes,1,opt,name=windCode,proto3" json:"windCode,omitempty"`
	ActionDay   int32  `protobuf:"varint,2,opt,name=actionDay,proto3" json:"actionDay,omitempty"`
	Time        int32  `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	DoneID      int32  `protobuf:"varint,4,opt,name=doneID,proto3" json:"doneID,omitempty"`
	Price       int64  `protobuf:"varint,5,opt,name=price,proto3" json:"price,omitempty"`
	PriceStatus string `protobuf:"bytes,6,opt,name=priceStatus,proto3" json:"priceStatus,omitempty"`
	Status      string `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	Direction   string `protobuf:"bytes,8,opt,name=direction,proto3" json:"direction,omitempty"`
	Source      string `protobuf:"bytes,9,opt,name=source,proto3" json:"source,omitempty"`
	SpecialFlag string `protobuf:"bytes,10,opt,name=specialFlag,proto3" json:"specialFlag,omitempty"`
}

func (x *UJU_TDF_BBQTRANSACTION) Reset() {
	*x = UJU_TDF_BBQTRANSACTION{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdCurrent_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UJU_TDF_BBQTRANSACTION) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UJU_TDF_BBQTRANSACTION) ProtoMessage() {}

func (x *UJU_TDF_BBQTRANSACTION) ProtoReflect() protoreflect.Message {
	mi := &file_mdCurrent_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UJU_TDF_BBQTRANSACTION.ProtoReflect.Descriptor instead.
func (*UJU_TDF_BBQTRANSACTION) Descriptor() ([]byte, []int) {
	return file_mdCurrent_proto_rawDescGZIP(), []int{7}
}

func (x *UJU_TDF_BBQTRANSACTION) GetWindCode() string {
	if x != nil {
		return x.WindCode
	}
	return ""
}

func (x *UJU_TDF_BBQTRANSACTION) GetActionDay() int32 {
	if x != nil {
		return x.ActionDay
	}
	return 0
}

func (x *UJU_TDF_BBQTRANSACTION) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *UJU_TDF_BBQTRANSACTION) GetDoneID() int32 {
	if x != nil {
		return x.DoneID
	}
	return 0
}

func (x *UJU_TDF_BBQTRANSACTION) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *UJU_TDF_BBQTRANSACTION) GetPriceStatus() string {
	if x != nil {
		return x.PriceStatus
	}
	return ""
}

func (x *UJU_TDF_BBQTRANSACTION) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UJU_TDF_BBQTRANSACTION) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *UJU_TDF_BBQTRANSACTION) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *UJU_TDF_BBQTRANSACTION) GetSpecialFlag() string {
	if x != nil {
		return x.SpecialFlag
	}
	return ""
}

// 3 BROKER_QUEUE
type UJU_TDF_BROKER_QUEUE struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WindCode   string  `protobuf:"bytes,1,opt,name=windCode,proto3" json:"windCode,omitempty"`
	Code       string  `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	ActionDay  int32   `protobuf:"varint,3,opt,name=actionDay,proto3" json:"actionDay,omitempty"`
	AskTime    int32   `protobuf:"varint,4,opt,name=askTime,proto3" json:"askTime,omitempty"`
	BidTime    int32   `protobuf:"varint,5,opt,name=bidTime,proto3" json:"bidTime,omitempty"`
	AskBrokers int32   `protobuf:"varint,6,opt,name=askBrokers,proto3" json:"askBrokers,omitempty"`
	BidBrokers int32   `protobuf:"varint,7,opt,name=bidBrokers,proto3" json:"bidBrokers,omitempty"`
	AskBroker  []int32 `protobuf:"varint,8,rep,packed,name=askBroker,proto3" json:"askBroker,omitempty"`
	BidBroker  []int32 `protobuf:"varint,9,rep,packed,name=bidBroker,proto3" json:"bidBroker,omitempty"`
}

func (x *UJU_TDF_BROKER_QUEUE) Reset() {
	*x = UJU_TDF_BROKER_QUEUE{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdCurrent_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UJU_TDF_BROKER_QUEUE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UJU_TDF_BROKER_QUEUE) ProtoMessage() {}

func (x *UJU_TDF_BROKER_QUEUE) ProtoReflect() protoreflect.Message {
	mi := &file_mdCurrent_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UJU_TDF_BROKER_QUEUE.ProtoReflect.Descriptor instead.
func (*UJU_TDF_BROKER_QUEUE) Descriptor() ([]byte, []int) {
	return file_mdCurrent_proto_rawDescGZIP(), []int{8}
}

func (x *UJU_TDF_BROKER_QUEUE) GetWindCode() string {
	if x != nil {
		return x.WindCode
	}
	return ""
}

func (x *UJU_TDF_BROKER_QUEUE) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *UJU_TDF_BROKER_QUEUE) GetActionDay() int32 {
	if x != nil {
		return x.ActionDay
	}
	return 0
}

func (x *UJU_TDF_BROKER_QUEUE) GetAskTime() int32 {
	if x != nil {
		return x.AskTime
	}
	return 0
}

func (x *UJU_TDF_BROKER_QUEUE) GetBidTime() int32 {
	if x != nil {
		return x.BidTime
	}
	return 0
}

func (x *UJU_TDF_BROKER_QUEUE) GetAskBrokers() int32 {
	if x != nil {
		return x.AskBrokers
	}
	return 0
}

func (x *UJU_TDF_BROKER_QUEUE) GetBidBrokers() int32 {
	if x != nil {
		return x.BidBrokers
	}
	return 0
}

func (x *UJU_TDF_BROKER_QUEUE) GetAskBroker() []int32 {
	if x != nil {
		return x.AskBroker
	}
	return nil
}

func (x *UJU_TDF_BROKER_QUEUE) GetBidBroker() []int32 {
	if x != nil {
		return x.BidBroker
	}
	return nil
}

// 4
type UJU_TDF_FUTURE_DATA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WindCode        string  `protobuf:"bytes,1,opt,name=windCode,proto3" json:"windCode,omitempty"`
	Code            string  `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	ActionDay       int32   `protobuf:"varint,3,opt,name=actionDay,proto3" json:"actionDay,omitempty"`
	TradingDay      int32   `protobuf:"varint,4,opt,name=tradingDay,proto3" json:"tradingDay,omitempty"`
	Time            int32   `protobuf:"varint,5,opt,name=time,proto3" json:"time,omitempty"`
	Status          int32   `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	PreOpenInterest int64   `protobuf:"varint,7,opt,name=preOpenInterest,proto3" json:"preOpenInterest,omitempty"`
	PreClose        int64   `protobuf:"varint,8,opt,name=preClose,proto3" json:"preClose,omitempty"`
	PreSettlePrice  int64   `protobuf:"varint,9,opt,name=preSettlePrice,proto3" json:"preSettlePrice,omitempty"`
	Open            int64   `protobuf:"varint,10,opt,name=open,proto3" json:"open,omitempty"`
	High            int64   `protobuf:"varint,11,opt,name=high,proto3" json:"high,omitempty"`
	Low             int64   `protobuf:"varint,12,opt,name=low,proto3" json:"low,omitempty"`
	Match           int64   `protobuf:"varint,13,opt,name=match,proto3" json:"match,omitempty"`
	Volume          int64   `protobuf:"varint,14,opt,name=volume,proto3" json:"volume,omitempty"`
	Turnover        int64   `protobuf:"varint,15,opt,name=turnover,proto3" json:"turnover,omitempty"`
	OpenInterest    int64   `protobuf:"varint,16,opt,name=openInterest,proto3" json:"openInterest,omitempty"`
	Close           int64   `protobuf:"varint,17,opt,name=close,proto3" json:"close,omitempty"`
	SettlePrice     int64   `protobuf:"varint,18,opt,name=settlePrice,proto3" json:"settlePrice,omitempty"`
	HighLimited     int64   `protobuf:"varint,19,opt,name=highLimited,proto3" json:"highLimited,omitempty"`
	LowLimited      int64   `protobuf:"varint,20,opt,name=lowLimited,proto3" json:"lowLimited,omitempty"`
	PreDelta        int32   `protobuf:"varint,21,opt,name=preDelta,proto3" json:"preDelta,omitempty"`
	CurrDelta       int32   `protobuf:"varint,22,opt,name=currDelta,proto3" json:"currDelta,omitempty"`
	AskPrice        []int64 `protobuf:"varint,23,rep,packed,name=askPrice,proto3" json:"askPrice,omitempty"`
	AskVol          []int64 `protobuf:"varint,24,rep,packed,name=askVol,proto3" json:"askVol,omitempty"`
	BidPrice        []int64 `protobuf:"varint,25,rep,packed,name=bidPrice,proto3" json:"bidPrice,omitempty"`
	BidVol          []int64 `protobuf:"varint,26,rep,packed,name=bidVol,proto3" json:"bidVol,omitempty"`
}

func (x *UJU_TDF_FUTURE_DATA) Reset() {
	*x = UJU_TDF_FUTURE_DATA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdCurrent_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UJU_TDF_FUTURE_DATA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UJU_TDF_FUTURE_DATA) ProtoMessage() {}

func (x *UJU_TDF_FUTURE_DATA) ProtoReflect() protoreflect.Message {
	mi := &file_mdCurrent_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UJU_TDF_FUTURE_DATA.ProtoReflect.Descriptor instead.
func (*UJU_TDF_FUTURE_DATA) Descriptor() ([]byte, []int) {
	return file_mdCurrent_proto_rawDescGZIP(), []int{9}
}

func (x *UJU_TDF_FUTURE_DATA) GetWindCode() string {
	if x != nil {
		return x.WindCode
	}
	return ""
}

func (x *UJU_TDF_FUTURE_DATA) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *UJU_TDF_FUTURE_DATA) GetActionDay() int32 {
	if x != nil {
		return x.ActionDay
	}
	return 0
}

func (x *UJU_TDF_FUTURE_DATA) GetTradingDay() int32 {
	if x != nil {
		return x.TradingDay
	}
	return 0
}

func (x *UJU_TDF_FUTURE_DATA) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *UJU_TDF_FUTURE_DATA) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UJU_TDF_FUTURE_DATA) GetPreOpenInterest() int64 {
	if x != nil {
		return x.PreOpenInterest
	}
	return 0
}

func (x *UJU_TDF_FUTURE_DATA) GetPreClose() int64 {
	if x != nil {
		return x.PreClose
	}
	return 0
}

func (x *UJU_TDF_FUTURE_DATA) GetPreSettlePrice() int64 {
	if x != nil {
		return x.PreSettlePrice
	}
	return 0
}

func (x *UJU_TDF_FUTURE_DATA) GetOpen() int64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *UJU_TDF_FUTURE_DATA) GetHigh() int64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *UJU_TDF_FUTURE_DATA) GetLow() int64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *UJU_TDF_FUTURE_DATA) GetMatch() int64 {
	if x != nil {
		return x.Match
	}
	return 0
}

func (x *UJU_TDF_FUTURE_DATA) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *UJU_TDF_FUTURE_DATA) GetTurnover() int64 {
	if x != nil {
		return x.Turnover
	}
	return 0
}

func (x *UJU_TDF_FUTURE_DATA) GetOpenInterest() int64 {
	if x != nil {
		return x.OpenInterest
	}
	return 0
}

func (x *UJU_TDF_FUTURE_DATA) GetClose() int64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *UJU_TDF_FUTURE_DATA) GetSettlePrice() int64 {
	if x != nil {
		return x.SettlePrice
	}
	return 0
}

func (x *UJU_TDF_FUTURE_DATA) GetHighLimited() int64 {
	if x != nil {
		return x.HighLimited
	}
	return 0
}

func (x *UJU_TDF_FUTURE_DATA) GetLowLimited() int64 {
	if x != nil {
		return x.LowLimited
	}
	return 0
}

func (x *UJU_TDF_FUTURE_DATA) GetPreDelta() int32 {
	if x != nil {
		return x.PreDelta
	}
	return 0
}

func (x *UJU_TDF_FUTURE_DATA) GetCurrDelta() int32 {
	if x != nil {
		return x.CurrDelta
	}
	return 0
}

func (x *UJU_TDF_FUTURE_DATA) GetAskPrice() []int64 {
	if x != nil {
		return x.AskPrice
	}
	return nil
}

func (x *UJU_TDF_FUTURE_DATA) GetAskVol() []int64 {
	if x != nil {
		return x.AskVol
	}
	return nil
}

func (x *UJU_TDF_FUTURE_DATA) GetBidPrice() []int64 {
	if x != nil {
		return x.BidPrice
	}
	return nil
}

func (x *UJU_TDF_FUTURE_DATA) GetBidVol() []int64 {
	if x != nil {
		return x.BidVol
	}
	return nil
}

// 5
type UJU_TDF_INDEX_DATA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WindCode      string `protobuf:"bytes,1,opt,name=windCode,proto3" json:"windCode,omitempty"`
	Code          string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	ActionDay     int32  `protobuf:"varint,3,opt,name=actionDay,proto3" json:"actionDay,omitempty"`
	TradingDay    int32  `protobuf:"varint,4,opt,name=tradingDay,proto3" json:"tradingDay,omitempty"`
	Time          int32  `protobuf:"varint,5,opt,name=time,proto3" json:"time,omitempty"`
	Status        int32  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	OpenIndex     int64  `protobuf:"varint,7,opt,name=openIndex,proto3" json:"openIndex,omitempty"`
	HighIndex     int64  `protobuf:"varint,8,opt,name=highIndex,proto3" json:"highIndex,omitempty"`
	LowIndex      int64  `protobuf:"varint,9,opt,name=lowIndex,proto3" json:"lowIndex,omitempty"`
	LastIndex     int64  `protobuf:"varint,10,opt,name=lastIndex,proto3" json:"lastIndex,omitempty"`
	TotalVolume   int64  `protobuf:"varint,11,opt,name=totalVolume,proto3" json:"totalVolume,omitempty"`
	Turnover      int64  `protobuf:"varint,12,opt,name=turnover,proto3" json:"turnover,omitempty"`
	PreCloseIndex int64  `protobuf:"varint,13,opt,name=preCloseIndex,proto3" json:"preCloseIndex,omitempty"`
}

func (x *UJU_TDF_INDEX_DATA) Reset() {
	*x = UJU_TDF_INDEX_DATA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdCurrent_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UJU_TDF_INDEX_DATA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UJU_TDF_INDEX_DATA) ProtoMessage() {}

func (x *UJU_TDF_INDEX_DATA) ProtoReflect() protoreflect.Message {
	mi := &file_mdCurrent_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UJU_TDF_INDEX_DATA.ProtoReflect.Descriptor instead.
func (*UJU_TDF_INDEX_DATA) Descriptor() ([]byte, []int) {
	return file_mdCurrent_proto_rawDescGZIP(), []int{10}
}

func (x *UJU_TDF_INDEX_DATA) GetWindCode() string {
	if x != nil {
		return x.WindCode
	}
	return ""
}

func (x *UJU_TDF_INDEX_DATA) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *UJU_TDF_INDEX_DATA) GetActionDay() int32 {
	if x != nil {
		return x.ActionDay
	}
	return 0
}

func (x *UJU_TDF_INDEX_DATA) GetTradingDay() int32 {
	if x != nil {
		return x.TradingDay
	}
	return 0
}

func (x *UJU_TDF_INDEX_DATA) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *UJU_TDF_INDEX_DATA) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UJU_TDF_INDEX_DATA) GetOpenIndex() int64 {
	if x != nil {
		return x.OpenIndex
	}
	return 0
}

func (x *UJU_TDF_INDEX_DATA) GetHighIndex() int64 {
	if x != nil {
		return x.HighIndex
	}
	return 0
}

func (x *UJU_TDF_INDEX_DATA) GetLowIndex() int64 {
	if x != nil {
		return x.LowIndex
	}
	return 0
}

func (x *UJU_TDF_INDEX_DATA) GetLastIndex() int64 {
	if x != nil {
		return x.LastIndex
	}
	return 0
}

func (x *UJU_TDF_INDEX_DATA) GetTotalVolume() int64 {
	if x != nil {
		return x.TotalVolume
	}
	return 0
}

func (x *UJU_TDF_INDEX_DATA) GetTurnover() int64 {
	if x != nil {
		return x.Turnover
	}
	return 0
}

func (x *UJU_TDF_INDEX_DATA) GetPreCloseIndex() int64 {
	if x != nil {
		return x.PreCloseIndex
	}
	return 0
}

// 6
type UJU_TDF_MARKET_CLOSE_DATA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Market string `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	Time   int32  `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Info   string `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *UJU_TDF_MARKET_CLOSE_DATA) Reset() {
	*x = UJU_TDF_MARKET_CLOSE_DATA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdCurrent_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UJU_TDF_MARKET_CLOSE_DATA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UJU_TDF_MARKET_CLOSE_DATA) ProtoMessage() {}

func (x *UJU_TDF_MARKET_CLOSE_DATA) ProtoReflect() protoreflect.Message {
	mi := &file_mdCurrent_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UJU_TDF_MARKET_CLOSE_DATA.ProtoReflect.Descriptor instead.
func (*UJU_TDF_MARKET_CLOSE_DATA) Descriptor() ([]byte, []int) {
	return file_mdCurrent_proto_rawDescGZIP(), []int{11}
}

func (x *UJU_TDF_MARKET_CLOSE_DATA) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *UJU_TDF_MARKET_CLOSE_DATA) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *UJU_TDF_MARKET_CLOSE_DATA) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

// 7
type UJU_TDF_MARKET_DATA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WindCode            string  `protobuf:"bytes,1,opt,name=windCode,proto3" json:"windCode,omitempty"`
	Code                string  `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	ActionDay           int32   `protobuf:"varint,3,opt,name=actionDay,proto3" json:"actionDay,omitempty"`
	TradingDay          int32   `protobuf:"varint,4,opt,name=tradingDay,proto3" json:"tradingDay,omitempty"`
	Time                int32   `protobuf:"varint,5,opt,name=time,proto3" json:"time,omitempty"`
	Status              int32   `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	PreClose            int64   `protobuf:"varint,7,opt,name=preClose,proto3" json:"preClose,omitempty"`
	Open                int64   `protobuf:"varint,8,opt,name=open,proto3" json:"open,omitempty"`
	High                int64   `protobuf:"varint,9,opt,name=high,proto3" json:"high,omitempty"`
	Low                 int64   `protobuf:"varint,10,opt,name=low,proto3" json:"low,omitempty"`
	Match               int64   `protobuf:"varint,11,opt,name=match,proto3" json:"match,omitempty"`
	AskPrice            []int64 `protobuf:"varint,12,rep,packed,name=askPrice,proto3" json:"askPrice,omitempty"`
	AskVol              []int64 `protobuf:"varint,13,rep,packed,name=askVol,proto3" json:"askVol,omitempty"`
	BidPrice            []int64 `protobuf:"varint,14,rep,packed,name=bidPrice,proto3" json:"bidPrice,omitempty"`
	BidVol              []int64 `protobuf:"varint,15,rep,packed,name=bidVol,proto3" json:"bidVol,omitempty"`
	NumTrades           int64   `protobuf:"varint,16,opt,name=numTrades,proto3" json:"numTrades,omitempty"`
	Volume              int64   `protobuf:"varint,17,opt,name=volume,proto3" json:"volume,omitempty"`
	Turnover            int64   `protobuf:"varint,18,opt,name=turnover,proto3" json:"turnover,omitempty"`
	TotalBidVol         int64   `protobuf:"varint,19,opt,name=totalBidVol,proto3" json:"totalBidVol,omitempty"`
	TotalAskVol         int64   `protobuf:"varint,20,opt,name=totalAskVol,proto3" json:"totalAskVol,omitempty"`
	WeightedAvgBidPrice int64   `protobuf:"varint,21,opt,name=weightedAvgBidPrice,proto3" json:"weightedAvgBidPrice,omitempty"`
	WeightedAvgAskPrice int64   `protobuf:"varint,22,opt,name=weightedAvgAskPrice,proto3" json:"weightedAvgAskPrice,omitempty"`
	IOPV                int32   `protobuf:"varint,23,opt,name=IOPV,proto3" json:"IOPV,omitempty"`
	YieldToMaturity     int32   `protobuf:"varint,24,opt,name=yieldToMaturity,proto3" json:"yieldToMaturity,omitempty"`
	HighLimited         int64   `protobuf:"varint,25,opt,name=highLimited,proto3" json:"highLimited,omitempty"`
	LowLimited          int64   `protobuf:"varint,26,opt,name=lowLimited,proto3" json:"lowLimited,omitempty"`
	Prefix              string  `protobuf:"bytes,27,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Syl1                int32   `protobuf:"varint,28,opt,name=syl1,proto3" json:"syl1,omitempty"`
	Syl2                int32   `protobuf:"varint,29,opt,name=syl2,proto3" json:"syl2,omitempty"`
	SD2                 int32   `protobuf:"varint,30,opt,name=SD2,proto3" json:"SD2,omitempty"`
	RealStatus          string  `protobuf:"bytes,31,opt,name=realStatus,proto3" json:"realStatus,omitempty"`
	OneSpeed            string  `protobuf:"bytes,32,opt,name=oneSpeed,proto3" json:"oneSpeed,omitempty"`
	TwoSpeed            string  `protobuf:"bytes,33,opt,name=twoSpeed,proto3" json:"twoSpeed,omitempty"`
	ThreeSpeed          string  `protobuf:"bytes,34,opt,name=threeSpeed,proto3" json:"threeSpeed,omitempty"`
	FourSpeed           string  `protobuf:"bytes,35,opt,name=fourSpeed,proto3" json:"fourSpeed,omitempty"`
	FiveSpeed           string  `protobuf:"bytes,36,opt,name=fiveSpeed,proto3" json:"fiveSpeed,omitempty"`
}

func (x *UJU_TDF_MARKET_DATA) Reset() {
	*x = UJU_TDF_MARKET_DATA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdCurrent_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UJU_TDF_MARKET_DATA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UJU_TDF_MARKET_DATA) ProtoMessage() {}

func (x *UJU_TDF_MARKET_DATA) ProtoReflect() protoreflect.Message {
	mi := &file_mdCurrent_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UJU_TDF_MARKET_DATA.ProtoReflect.Descriptor instead.
func (*UJU_TDF_MARKET_DATA) Descriptor() ([]byte, []int) {
	return file_mdCurrent_proto_rawDescGZIP(), []int{12}
}

func (x *UJU_TDF_MARKET_DATA) GetWindCode() string {
	if x != nil {
		return x.WindCode
	}
	return ""
}

func (x *UJU_TDF_MARKET_DATA) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *UJU_TDF_MARKET_DATA) GetActionDay() int32 {
	if x != nil {
		return x.ActionDay
	}
	return 0
}

func (x *UJU_TDF_MARKET_DATA) GetTradingDay() int32 {
	if x != nil {
		return x.TradingDay
	}
	return 0
}

func (x *UJU_TDF_MARKET_DATA) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *UJU_TDF_MARKET_DATA) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UJU_TDF_MARKET_DATA) GetPreClose() int64 {
	if x != nil {
		return x.PreClose
	}
	return 0
}

func (x *UJU_TDF_MARKET_DATA) GetOpen() int64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *UJU_TDF_MARKET_DATA) GetHigh() int64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *UJU_TDF_MARKET_DATA) GetLow() int64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *UJU_TDF_MARKET_DATA) GetMatch() int64 {
	if x != nil {
		return x.Match
	}
	return 0
}

func (x *UJU_TDF_MARKET_DATA) GetAskPrice() []int64 {
	if x != nil {
		return x.AskPrice
	}
	return nil
}

func (x *UJU_TDF_MARKET_DATA) GetAskVol() []int64 {
	if x != nil {
		return x.AskVol
	}
	return nil
}

func (x *UJU_TDF_MARKET_DATA) GetBidPrice() []int64 {
	if x != nil {
		return x.BidPrice
	}
	return nil
}

func (x *UJU_TDF_MARKET_DATA) GetBidVol() []int64 {
	if x != nil {
		return x.BidVol
	}
	return nil
}

func (x *UJU_TDF_MARKET_DATA) GetNumTrades() int64 {
	if x != nil {
		return x.NumTrades
	}
	return 0
}

func (x *UJU_TDF_MARKET_DATA) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *UJU_TDF_MARKET_DATA) GetTurnover() int64 {
	if x != nil {
		return x.Turnover
	}
	return 0
}

func (x *UJU_TDF_MARKET_DATA) GetTotalBidVol() int64 {
	if x != nil {
		return x.TotalBidVol
	}
	return 0
}

func (x *UJU_TDF_MARKET_DATA) GetTotalAskVol() int64 {
	if x != nil {
		return x.TotalAskVol
	}
	return 0
}

func (x *UJU_TDF_MARKET_DATA) GetWeightedAvgBidPrice() int64 {
	if x != nil {
		return x.WeightedAvgBidPrice
	}
	return 0
}

func (x *UJU_TDF_MARKET_DATA) GetWeightedAvgAskPrice() int64 {
	if x != nil {
		return x.WeightedAvgAskPrice
	}
	return 0
}

func (x *UJU_TDF_MARKET_DATA) GetIOPV() int32 {
	if x != nil {
		return x.IOPV
	}
	return 0
}

func (x *UJU_TDF_MARKET_DATA) GetYieldToMaturity() int32 {
	if x != nil {
		return x.YieldToMaturity
	}
	return 0
}

func (x *UJU_TDF_MARKET_DATA) GetHighLimited() int64 {
	if x != nil {
		return x.HighLimited
	}
	return 0
}

func (x *UJU_TDF_MARKET_DATA) GetLowLimited() int64 {
	if x != nil {
		return x.LowLimited
	}
	return 0
}

func (x *UJU_TDF_MARKET_DATA) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *UJU_TDF_MARKET_DATA) GetSyl1() int32 {
	if x != nil {
		return x.Syl1
	}
	return 0
}

func (x *UJU_TDF_MARKET_DATA) GetSyl2() int32 {
	if x != nil {
		return x.Syl2
	}
	return 0
}

func (x *UJU_TDF_MARKET_DATA) GetSD2() int32 {
	if x != nil {
		return x.SD2
	}
	return 0
}

func (x *UJU_TDF_MARKET_DATA) GetRealStatus() string {
	if x != nil {
		return x.RealStatus
	}
	return ""
}

func (x *UJU_TDF_MARKET_DATA) GetOneSpeed() string {
	if x != nil {
		return x.OneSpeed
	}
	return ""
}

func (x *UJU_TDF_MARKET_DATA) GetTwoSpeed() string {
	if x != nil {
		return x.TwoSpeed
	}
	return ""
}

func (x *UJU_TDF_MARKET_DATA) GetThreeSpeed() string {
	if x != nil {
		return x.ThreeSpeed
	}
	return ""
}

func (x *UJU_TDF_MARKET_DATA) GetFourSpeed() string {
	if x != nil {
		return x.FourSpeed
	}
	return ""
}

func (x *UJU_TDF_MARKET_DATA) GetFiveSpeed() string {
	if x != nil {
		return x.FiveSpeed
	}
	return ""
}

// 8
type UJU_TDF_ORDER_QUEUE struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WindCode  string  `protobuf:"bytes,1,opt,name=windCode,proto3" json:"windCode,omitempty"`
	Code      string  `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	ActionDay int32   `protobuf:"varint,3,opt,name=actionDay,proto3" json:"actionDay,omitempty"`
	Time      int32   `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
	Side      int32   `protobuf:"varint,5,opt,name=side,proto3" json:"side,omitempty"`
	Price     int64   `protobuf:"varint,6,opt,name=price,proto3" json:"price,omitempty"`
	Orders    int32   `protobuf:"varint,7,opt,name=orders,proto3" json:"orders,omitempty"`
	ABItems   int32   `protobuf:"varint,8,opt,name=ABItems,proto3" json:"ABItems,omitempty"`
	ABVolume  []int32 `protobuf:"varint,9,rep,packed,name=ABVolume,proto3" json:"ABVolume,omitempty"`
}

func (x *UJU_TDF_ORDER_QUEUE) Reset() {
	*x = UJU_TDF_ORDER_QUEUE{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdCurrent_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UJU_TDF_ORDER_QUEUE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UJU_TDF_ORDER_QUEUE) ProtoMessage() {}

func (x *UJU_TDF_ORDER_QUEUE) ProtoReflect() protoreflect.Message {
	mi := &file_mdCurrent_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UJU_TDF_ORDER_QUEUE.ProtoReflect.Descriptor instead.
func (*UJU_TDF_ORDER_QUEUE) Descriptor() ([]byte, []int) {
	return file_mdCurrent_proto_rawDescGZIP(), []int{13}
}

func (x *UJU_TDF_ORDER_QUEUE) GetWindCode() string {
	if x != nil {
		return x.WindCode
	}
	return ""
}

func (x *UJU_TDF_ORDER_QUEUE) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *UJU_TDF_ORDER_QUEUE) GetActionDay() int32 {
	if x != nil {
		return x.ActionDay
	}
	return 0
}

func (x *UJU_TDF_ORDER_QUEUE) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *UJU_TDF_ORDER_QUEUE) GetSide() int32 {
	if x != nil {
		return x.Side
	}
	return 0
}

func (x *UJU_TDF_ORDER_QUEUE) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *UJU_TDF_ORDER_QUEUE) GetOrders() int32 {
	if x != nil {
		return x.Orders
	}
	return 0
}

func (x *UJU_TDF_ORDER_QUEUE) GetABItems() int32 {
	if x != nil {
		return x.ABItems
	}
	return 0
}

func (x *UJU_TDF_ORDER_QUEUE) GetABVolume() []int32 {
	if x != nil {
		return x.ABVolume
	}
	return nil
}

// 9
type UJU_TDF_ORDER struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WindCode     string `protobuf:"bytes,1,opt,name=windCode,proto3" json:"windCode,omitempty"`
	Code         string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	ActionDay    int32  `protobuf:"varint,3,opt,name=actionDay,proto3" json:"actionDay,omitempty"`
	Time         int32  `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
	Order        int32  `protobuf:"varint,5,opt,name=order,proto3" json:"order,omitempty"`
	Price        int64  `protobuf:"varint,6,opt,name=price,proto3" json:"price,omitempty"`
	Volume       int32  `protobuf:"varint,7,opt,name=volume,proto3" json:"volume,omitempty"`
	OrderKind    string `protobuf:"bytes,8,opt,name=orderKind,proto3" json:"orderKind,omitempty"`
	FunctionCode string `protobuf:"bytes,9,opt,name=functionCode,proto3" json:"functionCode,omitempty"`
}

func (x *UJU_TDF_ORDER) Reset() {
	*x = UJU_TDF_ORDER{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdCurrent_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UJU_TDF_ORDER) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UJU_TDF_ORDER) ProtoMessage() {}

func (x *UJU_TDF_ORDER) ProtoReflect() protoreflect.Message {
	mi := &file_mdCurrent_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UJU_TDF_ORDER.ProtoReflect.Descriptor instead.
func (*UJU_TDF_ORDER) Descriptor() ([]byte, []int) {
	return file_mdCurrent_proto_rawDescGZIP(), []int{14}
}

func (x *UJU_TDF_ORDER) GetWindCode() string {
	if x != nil {
		return x.WindCode
	}
	return ""
}

func (x *UJU_TDF_ORDER) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *UJU_TDF_ORDER) GetActionDay() int32 {
	if x != nil {
		return x.ActionDay
	}
	return 0
}

func (x *UJU_TDF_ORDER) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *UJU_TDF_ORDER) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *UJU_TDF_ORDER) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *UJU_TDF_ORDER) GetVolume() int32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *UJU_TDF_ORDER) GetOrderKind() string {
	if x != nil {
		return x.OrderKind
	}
	return ""
}

func (x *UJU_TDF_ORDER) GetFunctionCode() string {
	if x != nil {
		return x.FunctionCode
	}
	return ""
}

// 10
type UJU_TDF_TRANSACTION struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WindCode     string `protobuf:"bytes,1,opt,name=windCode,proto3" json:"windCode,omitempty"`
	Code         string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	ActionDay    int32  `protobuf:"varint,3,opt,name=actionDay,proto3" json:"actionDay,omitempty"`
	Time         int32  `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
	Index        int32  `protobuf:"varint,5,opt,name=index,proto3" json:"index,omitempty"`
	Price        int64  `protobuf:"varint,6,opt,name=price,proto3" json:"price,omitempty"`
	Volume       int32  `protobuf:"varint,7,opt,name=volume,proto3" json:"volume,omitempty"`
	Turnover     int64  `protobuf:"varint,8,opt,name=turnover,proto3" json:"turnover,omitempty"`
	BSFlag       int32  `protobuf:"varint,9,opt,name=BSFlag,proto3" json:"BSFlag,omitempty"`
	OrderKind    string `protobuf:"bytes,10,opt,name=orderKind,proto3" json:"orderKind,omitempty"`
	FunctionCode string `protobuf:"bytes,11,opt,name=functionCode,proto3" json:"functionCode,omitempty"`
	AskOrder     int32  `protobuf:"varint,12,opt,name=askOrder,proto3" json:"askOrder,omitempty"`
	BidOrder     int32  `protobuf:"varint,13,opt,name=bidOrder,proto3" json:"bidOrder,omitempty"`
}

func (x *UJU_TDF_TRANSACTION) Reset() {
	*x = UJU_TDF_TRANSACTION{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdCurrent_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UJU_TDF_TRANSACTION) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UJU_TDF_TRANSACTION) ProtoMessage() {}

func (x *UJU_TDF_TRANSACTION) ProtoReflect() protoreflect.Message {
	mi := &file_mdCurrent_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UJU_TDF_TRANSACTION.ProtoReflect.Descriptor instead.
func (*UJU_TDF_TRANSACTION) Descriptor() ([]byte, []int) {
	return file_mdCurrent_proto_rawDescGZIP(), []int{15}
}

func (x *UJU_TDF_TRANSACTION) GetWindCode() string {
	if x != nil {
		return x.WindCode
	}
	return ""
}

func (x *UJU_TDF_TRANSACTION) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *UJU_TDF_TRANSACTION) GetActionDay() int32 {
	if x != nil {
		return x.ActionDay
	}
	return 0
}

func (x *UJU_TDF_TRANSACTION) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *UJU_TDF_TRANSACTION) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *UJU_TDF_TRANSACTION) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *UJU_TDF_TRANSACTION) GetVolume() int32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *UJU_TDF_TRANSACTION) GetTurnover() int64 {
	if x != nil {
		return x.Turnover
	}
	return 0
}

func (x *UJU_TDF_TRANSACTION) GetBSFlag() int32 {
	if x != nil {
		return x.BSFlag
	}
	return 0
}

func (x *UJU_TDF_TRANSACTION) GetOrderKind() string {
	if x != nil {
		return x.OrderKind
	}
	return ""
}

func (x *UJU_TDF_TRANSACTION) GetFunctionCode() string {
	if x != nil {
		return x.FunctionCode
	}
	return ""
}

func (x *UJU_TDF_TRANSACTION) GetAskOrder() int32 {
	if x != nil {
		return x.AskOrder
	}
	return 0
}

func (x *UJU_TDF_TRANSACTION) GetBidOrder() int32 {
	if x != nil {
		return x.BidOrder
	}
	return 0
}

// 深圳静态数据
type UJU_SZSEL2_STATIC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalTimeStamp             string  `protobuf:"bytes,1,opt,name=LocalTimeStamp,proto3" json:"LocalTimeStamp,omitempty"`
	QuotationFlag              string  `protobuf:"bytes,2,opt,name=QuotationFlag,proto3" json:"QuotationFlag,omitempty"`
	Symbol                     string  `protobuf:"bytes,3,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	SecurityName               string  `protobuf:"bytes,4,opt,name=SecurityName,proto3" json:"SecurityName,omitempty"`
	SymbolSource               string  `protobuf:"bytes,5,opt,name=SymbolSource,proto3" json:"SymbolSource,omitempty"`
	SecurityEN                 string  `protobuf:"bytes,6,opt,name=SecurityEN,proto3" json:"SecurityEN,omitempty"`
	ISINCode                   string  `protobuf:"bytes,7,opt,name=ISINCode,proto3" json:"ISINCode,omitempty"`
	SymbolUnderlying           string  `protobuf:"bytes,8,opt,name=SymbolUnderlying,proto3" json:"SymbolUnderlying,omitempty"`
	UnderlyingSecurityIDSource string  `protobuf:"bytes,9,opt,name=UnderlyingSecurityIDSource,proto3" json:"UnderlyingSecurityIDSource,omitempty"`
	SecurityType               int32   `protobuf:"varint,10,opt,name=SecurityType,proto3" json:"SecurityType,omitempty"`
	SecurityStatusTag          string  `protobuf:"bytes,11,opt,name=SecurityStatusTag,proto3" json:"SecurityStatusTag,omitempty"`
	PreClosePrice              float64 `protobuf:"fixed64,12,opt,name=PreClosePrice,proto3" json:"PreClosePrice,omitempty"`
	ListingDate                int32   `protobuf:"varint,13,opt,name=ListingDate,proto3" json:"ListingDate,omitempty"`
	Currency                   string  `protobuf:"bytes,14,opt,name=Currency,proto3" json:"Currency,omitempty"`
	ParValue                   float64 `protobuf:"fixed64,15,opt,name=ParValue,proto3" json:"ParValue,omitempty"`
	IssuedVolume               float64 `protobuf:"fixed64,16,opt,name=IssuedVolume,proto3" json:"IssuedVolume,omitempty"`
	OutstandingShare           float64 `protobuf:"fixed64,17,opt,name=OutstandingShare,proto3" json:"OutstandingShare,omitempty"`
	IndustryType               string  `protobuf:"bytes,18,opt,name=IndustryType,proto3" json:"IndustryType,omitempty"`
	PreYearEPS                 float64 `protobuf:"fixed64,19,opt,name=PreYearEPS,proto3" json:"PreYearEPS,omitempty"`
	YearEPS                    float64 `protobuf:"fixed64,20,opt,name=YearEPS,proto3" json:"YearEPS,omitempty"`
	OfferingFlag               string  `protobuf:"bytes,21,opt,name=OfferingFlag,proto3" json:"OfferingFlag,omitempty"`
	NAV                        float64 `protobuf:"fixed64,22,opt,name=NAV,proto3" json:"NAV,omitempty"`
	CouponRate                 float64 `protobuf:"fixed64,23,opt,name=CouponRate,proto3" json:"CouponRate,omitempty"`
	IssuePrice                 float64 `protobuf:"fixed64,24,opt,name=IssuePrice,proto3" json:"IssuePrice,omitempty"`
	Interest                   float64 `protobuf:"fixed64,25,opt,name=Interest,proto3" json:"Interest,omitempty"`
	InterestAccrualDate        int32   `protobuf:"varint,26,opt,name=InterestAccrualDate,proto3" json:"InterestAccrualDate,omitempty"`
	MaturityDate               int32   `protobuf:"varint,27,opt,name=MaturityDate,proto3" json:"MaturityDate,omitempty"`
	ConversionPrice            float64 `protobuf:"fixed64,28,opt,name=ConversionPrice,proto3" json:"ConversionPrice,omitempty"`
	ConversionRatio            float64 `protobuf:"fixed64,29,opt,name=ConversionRatio,proto3" json:"ConversionRatio,omitempty"`
	ConversionBeginDate        int32   `protobuf:"varint,30,opt,name=ConversionBeginDate,proto3" json:"ConversionBeginDate,omitempty"`
	ConversionEndDate          int32   `protobuf:"varint,31,opt,name=ConversionEndDate,proto3" json:"ConversionEndDate,omitempty"`
	CallOrPut                  string  `protobuf:"bytes,32,opt,name=CallOrPut,proto3" json:"CallOrPut,omitempty"`
	WarrantClearingType        string  `protobuf:"bytes,33,opt,name=WarrantClearingType,proto3" json:"WarrantClearingType,omitempty"`
	ClearingPrice              float64 `protobuf:"fixed64,34,opt,name=ClearingPrice,proto3" json:"ClearingPrice,omitempty"`
	OptionType                 string  `protobuf:"bytes,35,opt,name=OptionType,proto3" json:"OptionType,omitempty"`
	EndDate                    int32   `protobuf:"varint,36,opt,name=EndDate,proto3" json:"EndDate,omitempty"`
	ExpirationDays             int32   `protobuf:"varint,37,opt,name=ExpirationDays,proto3" json:"ExpirationDays,omitempty"`
	DayTrading                 string  `protobuf:"bytes,38,opt,name=DayTrading,proto3" json:"DayTrading,omitempty"`
	GageFlag                   string  `protobuf:"bytes,39,opt,name=GageFlag,proto3" json:"GageFlag,omitempty"`
	GageRate                   float64 `protobuf:"fixed64,40,opt,name=GageRate,proto3" json:"GageRate,omitempty"`
	CrdBuyUnderlying           string  `protobuf:"bytes,41,opt,name=CrdBuyUnderlying,proto3" json:"CrdBuyUnderlying,omitempty"`
	CrdSellUnderlying          string  `protobuf:"bytes,42,opt,name=CrdSellUnderlying,proto3" json:"CrdSellUnderlying,omitempty"`
	CrdPriceCheckType          string  `protobuf:"bytes,43,opt,name=CrdPriceCheckType,proto3" json:"CrdPriceCheckType,omitempty"`
	PledgeFlag                 string  `protobuf:"bytes,44,opt,name=PledgeFlag,proto3" json:"PledgeFlag,omitempty"`
	ContractMultiplier         float64 `protobuf:"fixed64,45,opt,name=ContractMultiplier,proto3" json:"ContractMultiplier,omitempty"`
	RegularShare               string  `protobuf:"bytes,46,opt,name=RegularShare,proto3" json:"RegularShare,omitempty"`
	QualificationFlag          string  `protobuf:"bytes,47,opt,name=QualificationFlag,proto3" json:"QualificationFlag,omitempty"`
	MarketMakerFlag            string  `protobuf:"bytes,48,opt,name=MarketMakerFlag,proto3" json:"MarketMakerFlag,omitempty"`
	RoundLot                   float64 `protobuf:"fixed64,49,opt,name=RoundLot,proto3" json:"RoundLot,omitempty"`
	TickSize                   float64 `protobuf:"fixed64,50,opt,name=TickSize,proto3" json:"TickSize,omitempty"`
	BuyQtyUpperLimit           float64 `protobuf:"fixed64,51,opt,name=BuyQtyUpperLimit,proto3" json:"BuyQtyUpperLimit,omitempty"`
	SellQtyUpperLimit          float64 `protobuf:"fixed64,52,opt,name=SellQtyUpperLimit,proto3" json:"SellQtyUpperLimit,omitempty"`
	BuyVolumeUnit              float64 `protobuf:"fixed64,53,opt,name=BuyVolumeUnit,proto3" json:"BuyVolumeUnit,omitempty"`
	SellVolumeUnit             float64 `protobuf:"fixed64,54,opt,name=SellVolumeUnit,proto3" json:"SellVolumeUnit,omitempty"`
	LimitUpRateO               float64 `protobuf:"fixed64,55,opt,name=LimitUpRateO,proto3" json:"LimitUpRateO,omitempty"`
	LimitDownRateO             float64 `protobuf:"fixed64,56,opt,name=LimitDownRateO,proto3" json:"LimitDownRateO,omitempty"`
	LimitUpAbsoluteO           float64 `protobuf:"fixed64,57,opt,name=LimitUpAbsoluteO,proto3" json:"LimitUpAbsoluteO,omitempty"`
	LimitDownAbsoluteO         float64 `protobuf:"fixed64,58,opt,name=LimitDownAbsoluteO,proto3" json:"LimitDownAbsoluteO,omitempty"`
	AuctionUpDownRateO         float64 `protobuf:"fixed64,59,opt,name=AuctionUpDownRateO,proto3" json:"AuctionUpDownRateO,omitempty"`
	AuctionUpDownAbsoluteO     float64 `protobuf:"fixed64,60,opt,name=AuctionUpDownAbsoluteO,proto3" json:"AuctionUpDownAbsoluteO,omitempty"`
	LimitUpRateT               float64 `protobuf:"fixed64,61,opt,name=LimitUpRateT,proto3" json:"LimitUpRateT,omitempty"`
	LimitDownRateT             float64 `protobuf:"fixed64,62,opt,name=LimitDownRateT,proto3" json:"LimitDownRateT,omitempty"`
	LimitUpAbsoluteT           float64 `protobuf:"fixed64,63,opt,name=LimitUpAbsoluteT,proto3" json:"LimitUpAbsoluteT,omitempty"`
	LimitDownAbsoluteT         float64 `protobuf:"fixed64,64,opt,name=LimitDownAbsoluteT,proto3" json:"LimitDownAbsoluteT,omitempty"`
	AuctionUpDownRateT         float64 `protobuf:"fixed64,65,opt,name=AuctionUpDownRateT,proto3" json:"AuctionUpDownRateT,omitempty"`
	AuctionUpDownAbsoluteT     float64 `protobuf:"fixed64,66,opt,name=AuctionUpDownAbsoluteT,proto3" json:"AuctionUpDownAbsoluteT,omitempty"`
	LimitUpRateC               float64 `protobuf:"fixed64,67,opt,name=LimitUpRateC,proto3" json:"LimitUpRateC,omitempty"`
	LimitDownRateC             float64 `protobuf:"fixed64,68,opt,name=LimitDownRateC,proto3" json:"LimitDownRateC,omitempty"`
	LimitUpAbsoluteC           float64 `protobuf:"fixed64,69,opt,name=LimitUpAbsoluteC,proto3" json:"LimitUpAbsoluteC,omitempty"`
	LimitDownAbsoluteC         float64 `protobuf:"fixed64,70,opt,name=LimitDownAbsoluteC,proto3" json:"LimitDownAbsoluteC,omitempty"`
	AuctionUpDownRateC         float64 `protobuf:"fixed64,71,opt,name=AuctionUpDownRateC,proto3" json:"AuctionUpDownRateC,omitempty"`
	AuctionUpDownAbsoluteC     float64 `protobuf:"fixed64,72,opt,name=AuctionUpDownAbsoluteC,proto3" json:"AuctionUpDownAbsoluteC,omitempty"`
	TradeDate                  int32   `protobuf:"varint,73,opt,name=TradeDate,proto3" json:"TradeDate,omitempty"`
	QualificationClass         string  `protobuf:"bytes,74,opt,name=QualificationClass,proto3" json:"QualificationClass,omitempty"`
	Attribute                  string  `protobuf:"bytes,75,opt,name=Attribute,proto3" json:"Attribute,omitempty"`
	NoProfit                   string  `protobuf:"bytes,76,opt,name=NoProfit,proto3" json:"NoProfit,omitempty"`
	WeightedVotingRights       string  `protobuf:"bytes,77,opt,name=WeightedVotingRights,proto3" json:"WeightedVotingRights,omitempty"`
	SecurityNameEx             string  `protobuf:"bytes,78,opt,name=SecurityNameEx,proto3" json:"SecurityNameEx,omitempty"`
	IsRegistration             string  `protobuf:"bytes,79,opt,name=IsRegistration,proto3" json:"IsRegistration,omitempty"`
	IsVIE                      string  `protobuf:"bytes,80,opt,name=IsVIE,proto3" json:"IsVIE,omitempty"`
	MktBuyQtyUpLimit           float64 `protobuf:"fixed64,81,opt,name=MktBuyQtyUpLimit,proto3" json:"MktBuyQtyUpLimit,omitempty"`
	MktSellQtyUpLimit          float64 `protobuf:"fixed64,82,opt,name=MktSellQtyUpLimit,proto3" json:"MktSellQtyUpLimit,omitempty"`
	MktBuyQtyUnit              float64 `protobuf:"fixed64,83,opt,name=MktBuyQtyUnit,proto3" json:"MktBuyQtyUnit,omitempty"`
	MktSellQtyUnit             float64 `protobuf:"fixed64,84,opt,name=MktSellQtyUnit,proto3" json:"MktSellQtyUnit,omitempty"`
	FixedPriceBuyQtyUpLimit    float64 `protobuf:"fixed64,85,opt,name=FixedPriceBuyQtyUpLimit,proto3" json:"FixedPriceBuyQtyUpLimit,omitempty"`
	FixedPriceSellQtyUpLimit   float64 `protobuf:"fixed64,86,opt,name=FixedPriceSellQtyUpLimit,proto3" json:"FixedPriceSellQtyUpLimit,omitempty"`
	FixedPriceBuyQtyUnit       float64 `protobuf:"fixed64,87,opt,name=FixedPriceBuyQtyUnit,proto3" json:"FixedPriceBuyQtyUnit,omitempty"`
	FixedPriceSellQtyUnit      float64 `protobuf:"fixed64,88,opt,name=FixedPriceSellQtyUnit,proto3" json:"FixedPriceSellQtyUnit,omitempty"`
}

func (x *UJU_SZSEL2_STATIC) Reset() {
	*x = UJU_SZSEL2_STATIC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdCurrent_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UJU_SZSEL2_STATIC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UJU_SZSEL2_STATIC) ProtoMessage() {}

func (x *UJU_SZSEL2_STATIC) ProtoReflect() protoreflect.Message {
	mi := &file_mdCurrent_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UJU_SZSEL2_STATIC.ProtoReflect.Descriptor instead.
func (*UJU_SZSEL2_STATIC) Descriptor() ([]byte, []int) {
	return file_mdCurrent_proto_rawDescGZIP(), []int{16}
}

func (x *UJU_SZSEL2_STATIC) GetLocalTimeStamp() string {
	if x != nil {
		return x.LocalTimeStamp
	}
	return ""
}

func (x *UJU_SZSEL2_STATIC) GetQuotationFlag() string {
	if x != nil {
		return x.QuotationFlag
	}
	return ""
}

func (x *UJU_SZSEL2_STATIC) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *UJU_SZSEL2_STATIC) GetSecurityName() string {
	if x != nil {
		return x.SecurityName
	}
	return ""
}

func (x *UJU_SZSEL2_STATIC) GetSymbolSource() string {
	if x != nil {
		return x.SymbolSource
	}
	return ""
}

func (x *UJU_SZSEL2_STATIC) GetSecurityEN() string {
	if x != nil {
		return x.SecurityEN
	}
	return ""
}

func (x *UJU_SZSEL2_STATIC) GetISINCode() string {
	if x != nil {
		return x.ISINCode
	}
	return ""
}

func (x *UJU_SZSEL2_STATIC) GetSymbolUnderlying() string {
	if x != nil {
		return x.SymbolUnderlying
	}
	return ""
}

func (x *UJU_SZSEL2_STATIC) GetUnderlyingSecurityIDSource() string {
	if x != nil {
		return x.UnderlyingSecurityIDSource
	}
	return ""
}

func (x *UJU_SZSEL2_STATIC) GetSecurityType() int32 {
	if x != nil {
		return x.SecurityType
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetSecurityStatusTag() string {
	if x != nil {
		return x.SecurityStatusTag
	}
	return ""
}

func (x *UJU_SZSEL2_STATIC) GetPreClosePrice() float64 {
	if x != nil {
		return x.PreClosePrice
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetListingDate() int32 {
	if x != nil {
		return x.ListingDate
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *UJU_SZSEL2_STATIC) GetParValue() float64 {
	if x != nil {
		return x.ParValue
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetIssuedVolume() float64 {
	if x != nil {
		return x.IssuedVolume
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetOutstandingShare() float64 {
	if x != nil {
		return x.OutstandingShare
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetIndustryType() string {
	if x != nil {
		return x.IndustryType
	}
	return ""
}

func (x *UJU_SZSEL2_STATIC) GetPreYearEPS() float64 {
	if x != nil {
		return x.PreYearEPS
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetYearEPS() float64 {
	if x != nil {
		return x.YearEPS
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetOfferingFlag() string {
	if x != nil {
		return x.OfferingFlag
	}
	return ""
}

func (x *UJU_SZSEL2_STATIC) GetNAV() float64 {
	if x != nil {
		return x.NAV
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetCouponRate() float64 {
	if x != nil {
		return x.CouponRate
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetIssuePrice() float64 {
	if x != nil {
		return x.IssuePrice
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetInterest() float64 {
	if x != nil {
		return x.Interest
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetInterestAccrualDate() int32 {
	if x != nil {
		return x.InterestAccrualDate
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetMaturityDate() int32 {
	if x != nil {
		return x.MaturityDate
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetConversionPrice() float64 {
	if x != nil {
		return x.ConversionPrice
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetConversionRatio() float64 {
	if x != nil {
		return x.ConversionRatio
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetConversionBeginDate() int32 {
	if x != nil {
		return x.ConversionBeginDate
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetConversionEndDate() int32 {
	if x != nil {
		return x.ConversionEndDate
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetCallOrPut() string {
	if x != nil {
		return x.CallOrPut
	}
	return ""
}

func (x *UJU_SZSEL2_STATIC) GetWarrantClearingType() string {
	if x != nil {
		return x.WarrantClearingType
	}
	return ""
}

func (x *UJU_SZSEL2_STATIC) GetClearingPrice() float64 {
	if x != nil {
		return x.ClearingPrice
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetOptionType() string {
	if x != nil {
		return x.OptionType
	}
	return ""
}

func (x *UJU_SZSEL2_STATIC) GetEndDate() int32 {
	if x != nil {
		return x.EndDate
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetExpirationDays() int32 {
	if x != nil {
		return x.ExpirationDays
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetDayTrading() string {
	if x != nil {
		return x.DayTrading
	}
	return ""
}

func (x *UJU_SZSEL2_STATIC) GetGageFlag() string {
	if x != nil {
		return x.GageFlag
	}
	return ""
}

func (x *UJU_SZSEL2_STATIC) GetGageRate() float64 {
	if x != nil {
		return x.GageRate
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetCrdBuyUnderlying() string {
	if x != nil {
		return x.CrdBuyUnderlying
	}
	return ""
}

func (x *UJU_SZSEL2_STATIC) GetCrdSellUnderlying() string {
	if x != nil {
		return x.CrdSellUnderlying
	}
	return ""
}

func (x *UJU_SZSEL2_STATIC) GetCrdPriceCheckType() string {
	if x != nil {
		return x.CrdPriceCheckType
	}
	return ""
}

func (x *UJU_SZSEL2_STATIC) GetPledgeFlag() string {
	if x != nil {
		return x.PledgeFlag
	}
	return ""
}

func (x *UJU_SZSEL2_STATIC) GetContractMultiplier() float64 {
	if x != nil {
		return x.ContractMultiplier
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetRegularShare() string {
	if x != nil {
		return x.RegularShare
	}
	return ""
}

func (x *UJU_SZSEL2_STATIC) GetQualificationFlag() string {
	if x != nil {
		return x.QualificationFlag
	}
	return ""
}

func (x *UJU_SZSEL2_STATIC) GetMarketMakerFlag() string {
	if x != nil {
		return x.MarketMakerFlag
	}
	return ""
}

func (x *UJU_SZSEL2_STATIC) GetRoundLot() float64 {
	if x != nil {
		return x.RoundLot
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetTickSize() float64 {
	if x != nil {
		return x.TickSize
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetBuyQtyUpperLimit() float64 {
	if x != nil {
		return x.BuyQtyUpperLimit
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetSellQtyUpperLimit() float64 {
	if x != nil {
		return x.SellQtyUpperLimit
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetBuyVolumeUnit() float64 {
	if x != nil {
		return x.BuyVolumeUnit
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetSellVolumeUnit() float64 {
	if x != nil {
		return x.SellVolumeUnit
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetLimitUpRateO() float64 {
	if x != nil {
		return x.LimitUpRateO
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetLimitDownRateO() float64 {
	if x != nil {
		return x.LimitDownRateO
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetLimitUpAbsoluteO() float64 {
	if x != nil {
		return x.LimitUpAbsoluteO
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetLimitDownAbsoluteO() float64 {
	if x != nil {
		return x.LimitDownAbsoluteO
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetAuctionUpDownRateO() float64 {
	if x != nil {
		return x.AuctionUpDownRateO
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetAuctionUpDownAbsoluteO() float64 {
	if x != nil {
		return x.AuctionUpDownAbsoluteO
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetLimitUpRateT() float64 {
	if x != nil {
		return x.LimitUpRateT
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetLimitDownRateT() float64 {
	if x != nil {
		return x.LimitDownRateT
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetLimitUpAbsoluteT() float64 {
	if x != nil {
		return x.LimitUpAbsoluteT
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetLimitDownAbsoluteT() float64 {
	if x != nil {
		return x.LimitDownAbsoluteT
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetAuctionUpDownRateT() float64 {
	if x != nil {
		return x.AuctionUpDownRateT
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetAuctionUpDownAbsoluteT() float64 {
	if x != nil {
		return x.AuctionUpDownAbsoluteT
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetLimitUpRateC() float64 {
	if x != nil {
		return x.LimitUpRateC
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetLimitDownRateC() float64 {
	if x != nil {
		return x.LimitDownRateC
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetLimitUpAbsoluteC() float64 {
	if x != nil {
		return x.LimitUpAbsoluteC
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetLimitDownAbsoluteC() float64 {
	if x != nil {
		return x.LimitDownAbsoluteC
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetAuctionUpDownRateC() float64 {
	if x != nil {
		return x.AuctionUpDownRateC
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetAuctionUpDownAbsoluteC() float64 {
	if x != nil {
		return x.AuctionUpDownAbsoluteC
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetTradeDate() int32 {
	if x != nil {
		return x.TradeDate
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetQualificationClass() string {
	if x != nil {
		return x.QualificationClass
	}
	return ""
}

func (x *UJU_SZSEL2_STATIC) GetAttribute() string {
	if x != nil {
		return x.Attribute
	}
	return ""
}

func (x *UJU_SZSEL2_STATIC) GetNoProfit() string {
	if x != nil {
		return x.NoProfit
	}
	return ""
}

func (x *UJU_SZSEL2_STATIC) GetWeightedVotingRights() string {
	if x != nil {
		return x.WeightedVotingRights
	}
	return ""
}

func (x *UJU_SZSEL2_STATIC) GetSecurityNameEx() string {
	if x != nil {
		return x.SecurityNameEx
	}
	return ""
}

func (x *UJU_SZSEL2_STATIC) GetIsRegistration() string {
	if x != nil {
		return x.IsRegistration
	}
	return ""
}

func (x *UJU_SZSEL2_STATIC) GetIsVIE() string {
	if x != nil {
		return x.IsVIE
	}
	return ""
}

func (x *UJU_SZSEL2_STATIC) GetMktBuyQtyUpLimit() float64 {
	if x != nil {
		return x.MktBuyQtyUpLimit
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetMktSellQtyUpLimit() float64 {
	if x != nil {
		return x.MktSellQtyUpLimit
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetMktBuyQtyUnit() float64 {
	if x != nil {
		return x.MktBuyQtyUnit
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetMktSellQtyUnit() float64 {
	if x != nil {
		return x.MktSellQtyUnit
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetFixedPriceBuyQtyUpLimit() float64 {
	if x != nil {
		return x.FixedPriceBuyQtyUpLimit
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetFixedPriceSellQtyUpLimit() float64 {
	if x != nil {
		return x.FixedPriceSellQtyUpLimit
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetFixedPriceBuyQtyUnit() float64 {
	if x != nil {
		return x.FixedPriceBuyQtyUnit
	}
	return 0
}

func (x *UJU_SZSEL2_STATIC) GetFixedPriceSellQtyUnit() float64 {
	if x != nil {
		return x.FixedPriceSellQtyUnit
	}
	return 0
}

// 上证静态数据
type UJU_SSEL2_STATIC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalTimeStamp           int32   `protobuf:"varint,1,opt,name=LocalTimeStamp,proto3" json:"LocalTimeStamp,omitempty"`
	QuotationFlag            string  `protobuf:"bytes,2,opt,name=QuotationFlag,proto3" json:"QuotationFlag,omitempty"`
	PacketTimeStamp          int64   `protobuf:"zigzag64,3,opt,name=PacketTimeStamp,proto3" json:"PacketTimeStamp,omitempty"`
	Time                     int32   `protobuf:"varint,4,opt,name=Time,proto3" json:"Time,omitempty"`
	Symbol                   string  `protobuf:"bytes,5,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	ISINCode                 string  `protobuf:"bytes,6,opt,name=ISINCode,proto3" json:"ISINCode,omitempty"`
	SecurityName             string  `protobuf:"bytes,7,opt,name=SecurityName,proto3" json:"SecurityName,omitempty"`
	SecurityEN               string  `protobuf:"bytes,8,opt,name=SecurityEN,proto3" json:"SecurityEN,omitempty"`
	SymbolUnderlying         string  `protobuf:"bytes,9,opt,name=SymbolUnderlying,proto3" json:"SymbolUnderlying,omitempty"`
	MarketType               string  `protobuf:"bytes,10,opt,name=MarketType,proto3" json:"MarketType,omitempty"`
	CFICode                  string  `protobuf:"bytes,11,opt,name=CFICode,proto3" json:"CFICode,omitempty"`
	SecuritySubType          string  `protobuf:"bytes,12,opt,name=SecuritySubType,proto3" json:"SecuritySubType,omitempty"`
	Currency                 string  `protobuf:"bytes,13,opt,name=Currency,proto3" json:"Currency,omitempty"`
	ParValue                 float64 `protobuf:"fixed64,14,opt,name=ParValue,proto3" json:"ParValue,omitempty"`
	TradableNo               int64   `protobuf:"zigzag64,15,opt,name=TradableNo,proto3" json:"TradableNo,omitempty"`
	EndDate                  int32   `protobuf:"varint,16,opt,name=EndDate,proto3" json:"EndDate,omitempty"`
	ListingDate              int32   `protobuf:"varint,17,opt,name=ListingDate,proto3" json:"ListingDate,omitempty"`
	SetNo                    int32   `protobuf:"varint,18,opt,name=SetNo,proto3" json:"SetNo,omitempty"`
	BuyVolumeUnit            int32   `protobuf:"varint,19,opt,name=BuyVolumeUnit,proto3" json:"BuyVolumeUnit,omitempty"`
	SellVolumeUnit           int32   `protobuf:"varint,20,opt,name=SellVolumeUnit,proto3" json:"SellVolumeUnit,omitempty"`
	DeclareVolumeFloor       int32   `protobuf:"varint,21,opt,name=DeclareVolumeFloor,proto3" json:"DeclareVolumeFloor,omitempty"`
	DeclareVolumeCeiling     int32   `protobuf:"varint,22,opt,name=DeclareVolumeCeiling,proto3" json:"DeclareVolumeCeiling,omitempty"`
	PreClosePrice            float64 `protobuf:"fixed64,23,opt,name=PreClosePrice,proto3" json:"PreClosePrice,omitempty"`
	TickSize                 float64 `protobuf:"fixed64,24,opt,name=TickSize,proto3" json:"TickSize,omitempty"`
	UpDownLimitType          string  `protobuf:"bytes,25,opt,name=UpDownLimitType,proto3" json:"UpDownLimitType,omitempty"`
	PriceUpLimit             float64 `protobuf:"fixed64,26,opt,name=PriceUpLimit,proto3" json:"PriceUpLimit,omitempty"`
	PriceDownLimit           float64 `protobuf:"fixed64,27,opt,name=PriceDownLimit,proto3" json:"PriceDownLimit,omitempty"`
	XRRatio                  float64 `protobuf:"fixed64,28,opt,name=XRRatio,proto3" json:"XRRatio,omitempty"`
	XDAmount                 float64 `protobuf:"fixed64,29,opt,name=XDAmount,proto3" json:"XDAmount,omitempty"`
	CrdBuyUnderlying         string  `protobuf:"bytes,30,opt,name=CrdBuyUnderlying,proto3" json:"CrdBuyUnderlying,omitempty"`
	CrdSellUnderlying        string  `protobuf:"bytes,31,opt,name=CrdSellUnderlying,proto3" json:"CrdSellUnderlying,omitempty"`
	SecurityStatus           string  `protobuf:"bytes,32,opt,name=SecurityStatus,proto3" json:"SecurityStatus,omitempty"`
	SampleNo                 int32   `protobuf:"varint,33,opt,name=SampleNo,proto3" json:"SampleNo,omitempty"`
	SampleAvgPrice           float64 `protobuf:"fixed64,34,opt,name=SampleAvgPrice,proto3" json:"SampleAvgPrice,omitempty"`
	TradeAmount              float64 `protobuf:"fixed64,35,opt,name=TradeAmount,proto3" json:"TradeAmount,omitempty"`
	AvgCapital               float64 `protobuf:"fixed64,36,opt,name=AvgCapital,proto3" json:"AvgCapital,omitempty"`
	TotalMarketValue         float64 `protobuf:"fixed64,37,opt,name=TotalMarketValue,proto3" json:"TotalMarketValue,omitempty"`
	MarketValueRatio         float64 `protobuf:"fixed64,38,opt,name=MarketValueRatio,proto3" json:"MarketValueRatio,omitempty"`
	StaticPERatio            float64 `protobuf:"fixed64,39,opt,name=StaticPERatio,proto3" json:"StaticPERatio,omitempty"`
	IndexLevelStatus         string  `protobuf:"bytes,40,opt,name=IndexLevelStatus,proto3" json:"IndexLevelStatus,omitempty"`
	TradeDate                int32   `protobuf:"varint,41,opt,name=TradeDate,proto3" json:"TradeDate,omitempty"`
	GageUnderlying           string  `protobuf:"bytes,42,opt,name=GageUnderlying,proto3" json:"GageUnderlying,omitempty"`
	CrdBuyBalance            float64 `protobuf:"fixed64,43,opt,name=CrdBuyBalance,proto3" json:"CrdBuyBalance,omitempty"`
	CrdSellMargin            uint64  `protobuf:"varint,44,opt,name=CrdSellMargin,proto3" json:"CrdSellMargin,omitempty"`
	MktOrdCeiling            uint64  `protobuf:"varint,45,opt,name=MktOrdCeiling,proto3" json:"MktOrdCeiling,omitempty"`
	MktOrdFloor              uint64  `protobuf:"varint,46,opt,name=MktOrdFloor,proto3" json:"MktOrdFloor,omitempty"`
	OutstandingShare         uint64  `protobuf:"varint,47,opt,name=OutstandingShare,proto3" json:"OutstandingShare,omitempty"`
	CumulativeChgVolume      float64 `protobuf:"fixed64,48,opt,name=CumulativeChgVolume,proto3" json:"CumulativeChgVolume,omitempty"`
	CDRSecurityName          string  `protobuf:"bytes,49,opt,name=CDRSecurityName,proto3" json:"CDRSecurityName,omitempty"`
	CDRConvertBase           float64 `protobuf:"fixed64,50,opt,name=CDRConvertBase,proto3" json:"CDRConvertBase,omitempty"`
	UnderlyingConvertBase    float64 `protobuf:"fixed64,51,opt,name=UnderlyingConvertBase,proto3" json:"UnderlyingConvertBase,omitempty"`
	NameUnderlying           string  `protobuf:"bytes,52,opt,name=NameUnderlying,proto3" json:"NameUnderlying,omitempty"`
	DepositoryCode           string  `protobuf:"bytes,53,opt,name=DepositoryCode,proto3" json:"DepositoryCode,omitempty"`
	DepositoryName           string  `protobuf:"bytes,54,opt,name=DepositoryName,proto3" json:"DepositoryName,omitempty"`
	InitialDay               string  `protobuf:"bytes,55,opt,name=InitialDay,proto3" json:"InitialDay,omitempty"`
	TerminationDay           string  `protobuf:"bytes,56,opt,name=TerminationDay,proto3" json:"TerminationDay,omitempty"`
	GDRSecurityName          string  `protobuf:"bytes,57,opt,name=GDRSecurityName,proto3" json:"GDRSecurityName,omitempty"`
	ListingGDRSharesNo       int64   `protobuf:"varint,58,opt,name=ListingGDRSharesNo,proto3" json:"ListingGDRSharesNo,omitempty"`
	ListingUnderlyingStockNo uint64  `protobuf:"varint,59,opt,name=ListingUnderlyingStockNo,proto3" json:"ListingUnderlyingStockNo,omitempty"`
	NewSharesListingDate     string  `protobuf:"bytes,60,opt,name=NewSharesListingDate,proto3" json:"NewSharesListingDate,omitempty"`
	NewSharesReason          string  `protobuf:"bytes,61,opt,name=NewSharesReason,proto3" json:"NewSharesReason,omitempty"`
	GDRSwitchRatio           string  `protobuf:"bytes,62,opt,name=GDRSwitchRatio,proto3" json:"GDRSwitchRatio,omitempty"`
	CountryRegisterID        string  `protobuf:"bytes,63,opt,name=CountryRegisterID,proto3" json:"CountryRegisterID,omitempty"`
	MarketSegmentCode        string  `protobuf:"bytes,64,opt,name=MarketSegmentCode,proto3" json:"MarketSegmentCode,omitempty"`
	MarketSectorCode         string  `protobuf:"bytes,65,opt,name=MarketSectorCode,proto3" json:"MarketSectorCode,omitempty"`
	SEDOL                    string  `protobuf:"bytes,66,opt,name=SEDOL,proto3" json:"SEDOL,omitempty"`
	PreOpenPrice             float64 `protobuf:"fixed64,67,opt,name=PreOpenPrice,proto3" json:"PreOpenPrice,omitempty"`
	PreCloseBuyPrice01       float64 `protobuf:"fixed64,68,opt,name=PreCloseBuyPrice01,proto3" json:"PreCloseBuyPrice01,omitempty"`
	SybUndPreClosePrice      float64 `protobuf:"fixed64,69,opt,name=SybUndPreClosePrice,proto3" json:"SybUndPreClosePrice,omitempty"`
	PreCloseSellPrice01      float64 `protobuf:"fixed64,70,opt,name=PreCloseSellPrice01,proto3" json:"PreCloseSellPrice01,omitempty"`
	PreTotalVolume           uint64  `protobuf:"varint,71,opt,name=PreTotalVolume,proto3" json:"PreTotalVolume,omitempty"`
	PreTotalAmount           float64 `protobuf:"fixed64,72,opt,name=PreTotalAmount,proto3" json:"PreTotalAmount,omitempty"`
	PreTotalNo               uint64  `protobuf:"varint,73,opt,name=PreTotalNo,proto3" json:"PreTotalNo,omitempty"`
	PreHighPrice             float64 `protobuf:"fixed64,74,opt,name=PreHighPrice,proto3" json:"PreHighPrice,omitempty"`
	PreLowPrice              float64 `protobuf:"fixed64,75,opt,name=PreLowPrice,proto3" json:"PreLowPrice,omitempty"`
	PreNonAutoHighPrice      float64 `protobuf:"fixed64,76,opt,name=PreNonAutoHighPrice,proto3" json:"PreNonAutoHighPrice,omitempty"`
	PreNonAutoLowPrice       float64 `protobuf:"fixed64,77,opt,name=PreNonAutoLowPrice,proto3" json:"PreNonAutoLowPrice,omitempty"`
	YearHighPrice            float64 `protobuf:"fixed64,78,opt,name=YearHighPrice,proto3" json:"YearHighPrice,omitempty"`
	DateYearHighPrice        int32   `protobuf:"varint,79,opt,name=DateYearHighPrice,proto3" json:"DateYearHighPrice,omitempty"`
	YearLowPrice             float64 `protobuf:"fixed64,80,opt,name=YearLowPrice,proto3" json:"YearLowPrice,omitempty"`
	DateYearLowPrice         int32   `protobuf:"varint,81,opt,name=DateYearLowPrice,proto3" json:"DateYearLowPrice,omitempty"`
	YearNonAutoHighPrice     float64 `protobuf:"fixed64,82,opt,name=YearNonAutoHighPrice,proto3" json:"YearNonAutoHighPrice,omitempty"`
	DateYearNonAutoHighPrice int32   `protobuf:"varint,83,opt,name=DateYearNonAutoHighPrice,proto3" json:"DateYearNonAutoHighPrice,omitempty"`
	YearNonAutoLowPrice      float64 `protobuf:"fixed64,84,opt,name=YearNonAutoLowPrice,proto3" json:"YearNonAutoLowPrice,omitempty"`
	DateYearNonAutoLowPrice  int32   `protobuf:"varint,85,opt,name=DateYearNonAutoLowPrice,proto3" json:"DateYearNonAutoLowPrice,omitempty"`
	PreAveragePrice          float64 `protobuf:"fixed64,86,opt,name=PreAveragePrice,proto3" json:"PreAveragePrice,omitempty"`
	SecurityNameEx           string  `protobuf:"bytes,87,opt,name=SecurityNameEx,proto3" json:"SecurityNameEx,omitempty"`
}

func (x *UJU_SSEL2_STATIC) Reset() {
	*x = UJU_SSEL2_STATIC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdCurrent_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UJU_SSEL2_STATIC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UJU_SSEL2_STATIC) ProtoMessage() {}

func (x *UJU_SSEL2_STATIC) ProtoReflect() protoreflect.Message {
	mi := &file_mdCurrent_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UJU_SSEL2_STATIC.ProtoReflect.Descriptor instead.
func (*UJU_SSEL2_STATIC) Descriptor() ([]byte, []int) {
	return file_mdCurrent_proto_rawDescGZIP(), []int{17}
}

func (x *UJU_SSEL2_STATIC) GetLocalTimeStamp() int32 {
	if x != nil {
		return x.LocalTimeStamp
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetQuotationFlag() string {
	if x != nil {
		return x.QuotationFlag
	}
	return ""
}

func (x *UJU_SSEL2_STATIC) GetPacketTimeStamp() int64 {
	if x != nil {
		return x.PacketTimeStamp
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *UJU_SSEL2_STATIC) GetISINCode() string {
	if x != nil {
		return x.ISINCode
	}
	return ""
}

func (x *UJU_SSEL2_STATIC) GetSecurityName() string {
	if x != nil {
		return x.SecurityName
	}
	return ""
}

func (x *UJU_SSEL2_STATIC) GetSecurityEN() string {
	if x != nil {
		return x.SecurityEN
	}
	return ""
}

func (x *UJU_SSEL2_STATIC) GetSymbolUnderlying() string {
	if x != nil {
		return x.SymbolUnderlying
	}
	return ""
}

func (x *UJU_SSEL2_STATIC) GetMarketType() string {
	if x != nil {
		return x.MarketType
	}
	return ""
}

func (x *UJU_SSEL2_STATIC) GetCFICode() string {
	if x != nil {
		return x.CFICode
	}
	return ""
}

func (x *UJU_SSEL2_STATIC) GetSecuritySubType() string {
	if x != nil {
		return x.SecuritySubType
	}
	return ""
}

func (x *UJU_SSEL2_STATIC) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *UJU_SSEL2_STATIC) GetParValue() float64 {
	if x != nil {
		return x.ParValue
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetTradableNo() int64 {
	if x != nil {
		return x.TradableNo
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetEndDate() int32 {
	if x != nil {
		return x.EndDate
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetListingDate() int32 {
	if x != nil {
		return x.ListingDate
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetSetNo() int32 {
	if x != nil {
		return x.SetNo
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetBuyVolumeUnit() int32 {
	if x != nil {
		return x.BuyVolumeUnit
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetSellVolumeUnit() int32 {
	if x != nil {
		return x.SellVolumeUnit
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetDeclareVolumeFloor() int32 {
	if x != nil {
		return x.DeclareVolumeFloor
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetDeclareVolumeCeiling() int32 {
	if x != nil {
		return x.DeclareVolumeCeiling
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetPreClosePrice() float64 {
	if x != nil {
		return x.PreClosePrice
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetTickSize() float64 {
	if x != nil {
		return x.TickSize
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetUpDownLimitType() string {
	if x != nil {
		return x.UpDownLimitType
	}
	return ""
}

func (x *UJU_SSEL2_STATIC) GetPriceUpLimit() float64 {
	if x != nil {
		return x.PriceUpLimit
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetPriceDownLimit() float64 {
	if x != nil {
		return x.PriceDownLimit
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetXRRatio() float64 {
	if x != nil {
		return x.XRRatio
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetXDAmount() float64 {
	if x != nil {
		return x.XDAmount
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetCrdBuyUnderlying() string {
	if x != nil {
		return x.CrdBuyUnderlying
	}
	return ""
}

func (x *UJU_SSEL2_STATIC) GetCrdSellUnderlying() string {
	if x != nil {
		return x.CrdSellUnderlying
	}
	return ""
}

func (x *UJU_SSEL2_STATIC) GetSecurityStatus() string {
	if x != nil {
		return x.SecurityStatus
	}
	return ""
}

func (x *UJU_SSEL2_STATIC) GetSampleNo() int32 {
	if x != nil {
		return x.SampleNo
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetSampleAvgPrice() float64 {
	if x != nil {
		return x.SampleAvgPrice
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetTradeAmount() float64 {
	if x != nil {
		return x.TradeAmount
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetAvgCapital() float64 {
	if x != nil {
		return x.AvgCapital
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetTotalMarketValue() float64 {
	if x != nil {
		return x.TotalMarketValue
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetMarketValueRatio() float64 {
	if x != nil {
		return x.MarketValueRatio
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetStaticPERatio() float64 {
	if x != nil {
		return x.StaticPERatio
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetIndexLevelStatus() string {
	if x != nil {
		return x.IndexLevelStatus
	}
	return ""
}

func (x *UJU_SSEL2_STATIC) GetTradeDate() int32 {
	if x != nil {
		return x.TradeDate
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetGageUnderlying() string {
	if x != nil {
		return x.GageUnderlying
	}
	return ""
}

func (x *UJU_SSEL2_STATIC) GetCrdBuyBalance() float64 {
	if x != nil {
		return x.CrdBuyBalance
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetCrdSellMargin() uint64 {
	if x != nil {
		return x.CrdSellMargin
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetMktOrdCeiling() uint64 {
	if x != nil {
		return x.MktOrdCeiling
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetMktOrdFloor() uint64 {
	if x != nil {
		return x.MktOrdFloor
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetOutstandingShare() uint64 {
	if x != nil {
		return x.OutstandingShare
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetCumulativeChgVolume() float64 {
	if x != nil {
		return x.CumulativeChgVolume
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetCDRSecurityName() string {
	if x != nil {
		return x.CDRSecurityName
	}
	return ""
}

func (x *UJU_SSEL2_STATIC) GetCDRConvertBase() float64 {
	if x != nil {
		return x.CDRConvertBase
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetUnderlyingConvertBase() float64 {
	if x != nil {
		return x.UnderlyingConvertBase
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetNameUnderlying() string {
	if x != nil {
		return x.NameUnderlying
	}
	return ""
}

func (x *UJU_SSEL2_STATIC) GetDepositoryCode() string {
	if x != nil {
		return x.DepositoryCode
	}
	return ""
}

func (x *UJU_SSEL2_STATIC) GetDepositoryName() string {
	if x != nil {
		return x.DepositoryName
	}
	return ""
}

func (x *UJU_SSEL2_STATIC) GetInitialDay() string {
	if x != nil {
		return x.InitialDay
	}
	return ""
}

func (x *UJU_SSEL2_STATIC) GetTerminationDay() string {
	if x != nil {
		return x.TerminationDay
	}
	return ""
}

func (x *UJU_SSEL2_STATIC) GetGDRSecurityName() string {
	if x != nil {
		return x.GDRSecurityName
	}
	return ""
}

func (x *UJU_SSEL2_STATIC) GetListingGDRSharesNo() int64 {
	if x != nil {
		return x.ListingGDRSharesNo
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetListingUnderlyingStockNo() uint64 {
	if x != nil {
		return x.ListingUnderlyingStockNo
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetNewSharesListingDate() string {
	if x != nil {
		return x.NewSharesListingDate
	}
	return ""
}

func (x *UJU_SSEL2_STATIC) GetNewSharesReason() string {
	if x != nil {
		return x.NewSharesReason
	}
	return ""
}

func (x *UJU_SSEL2_STATIC) GetGDRSwitchRatio() string {
	if x != nil {
		return x.GDRSwitchRatio
	}
	return ""
}

func (x *UJU_SSEL2_STATIC) GetCountryRegisterID() string {
	if x != nil {
		return x.CountryRegisterID
	}
	return ""
}

func (x *UJU_SSEL2_STATIC) GetMarketSegmentCode() string {
	if x != nil {
		return x.MarketSegmentCode
	}
	return ""
}

func (x *UJU_SSEL2_STATIC) GetMarketSectorCode() string {
	if x != nil {
		return x.MarketSectorCode
	}
	return ""
}

func (x *UJU_SSEL2_STATIC) GetSEDOL() string {
	if x != nil {
		return x.SEDOL
	}
	return ""
}

func (x *UJU_SSEL2_STATIC) GetPreOpenPrice() float64 {
	if x != nil {
		return x.PreOpenPrice
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetPreCloseBuyPrice01() float64 {
	if x != nil {
		return x.PreCloseBuyPrice01
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetSybUndPreClosePrice() float64 {
	if x != nil {
		return x.SybUndPreClosePrice
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetPreCloseSellPrice01() float64 {
	if x != nil {
		return x.PreCloseSellPrice01
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetPreTotalVolume() uint64 {
	if x != nil {
		return x.PreTotalVolume
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetPreTotalAmount() float64 {
	if x != nil {
		return x.PreTotalAmount
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetPreTotalNo() uint64 {
	if x != nil {
		return x.PreTotalNo
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetPreHighPrice() float64 {
	if x != nil {
		return x.PreHighPrice
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetPreLowPrice() float64 {
	if x != nil {
		return x.PreLowPrice
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetPreNonAutoHighPrice() float64 {
	if x != nil {
		return x.PreNonAutoHighPrice
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetPreNonAutoLowPrice() float64 {
	if x != nil {
		return x.PreNonAutoLowPrice
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetYearHighPrice() float64 {
	if x != nil {
		return x.YearHighPrice
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetDateYearHighPrice() int32 {
	if x != nil {
		return x.DateYearHighPrice
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetYearLowPrice() float64 {
	if x != nil {
		return x.YearLowPrice
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetDateYearLowPrice() int32 {
	if x != nil {
		return x.DateYearLowPrice
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetYearNonAutoHighPrice() float64 {
	if x != nil {
		return x.YearNonAutoHighPrice
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetDateYearNonAutoHighPrice() int32 {
	if x != nil {
		return x.DateYearNonAutoHighPrice
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetYearNonAutoLowPrice() float64 {
	if x != nil {
		return x.YearNonAutoLowPrice
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetDateYearNonAutoLowPrice() int32 {
	if x != nil {
		return x.DateYearNonAutoLowPrice
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetPreAveragePrice() float64 {
	if x != nil {
		return x.PreAveragePrice
	}
	return 0
}

func (x *UJU_SSEL2_STATIC) GetSecurityNameEx() string {
	if x != nil {
		return x.SecurityNameEx
	}
	return ""
}

// 上证债券静态数据
type UJU_SSEL2_BondStatic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalTimeStamp           int32   `protobuf:"varint,1,opt,name=LocalTimeStamp,proto3" json:"LocalTimeStamp,omitempty"`
	QuotationFlag            string  `protobuf:"bytes,2,opt,name=QuotationFlag,proto3" json:"QuotationFlag,omitempty"`
	PacketTimeStamp          int64   `protobuf:"zigzag64,3,opt,name=PacketTimeStamp,proto3" json:"PacketTimeStamp,omitempty"`
	Time                     int32   `protobuf:"varint,4,opt,name=Time,proto3" json:"Time,omitempty"`
	Symbol                   string  `protobuf:"bytes,5,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	ISINCode                 string  `protobuf:"bytes,6,opt,name=ISINCode,proto3" json:"ISINCode,omitempty"`
	SecurityName             string  `protobuf:"bytes,7,opt,name=SecurityName,proto3" json:"SecurityName,omitempty"`
	SecurityEN               string  `protobuf:"bytes,8,opt,name=SecurityEN,proto3" json:"SecurityEN,omitempty"`
	SymbolUnderlying         string  `protobuf:"bytes,9,opt,name=SymbolUnderlying,proto3" json:"SymbolUnderlying,omitempty"`
	MarketType               string  `protobuf:"bytes,10,opt,name=MarketType,proto3" json:"MarketType,omitempty"`
	CFICode                  string  `protobuf:"bytes,11,opt,name=CFICode,proto3" json:"CFICode,omitempty"`
	SecuritySubType          string  `protobuf:"bytes,12,opt,name=SecuritySubType,proto3" json:"SecuritySubType,omitempty"`
	Currency                 string  `protobuf:"bytes,13,opt,name=Currency,proto3" json:"Currency,omitempty"`
	ParValue                 float64 `protobuf:"fixed64,14,opt,name=ParValue,proto3" json:"ParValue,omitempty"`
	TradableNo               int64   `protobuf:"zigzag64,15,opt,name=TradableNo,proto3" json:"TradableNo,omitempty"`
	EndDate                  int32   `protobuf:"varint,16,opt,name=EndDate,proto3" json:"EndDate,omitempty"`
	ListingDate              int32   `protobuf:"varint,17,opt,name=ListingDate,proto3" json:"ListingDate,omitempty"`
	SetNo                    int32   `protobuf:"varint,18,opt,name=SetNo,proto3" json:"SetNo,omitempty"`
	BuyVolumeUnit            int32   `protobuf:"varint,19,opt,name=BuyVolumeUnit,proto3" json:"BuyVolumeUnit,omitempty"`
	SellVolumeUnit           int32   `protobuf:"varint,20,opt,name=SellVolumeUnit,proto3" json:"SellVolumeUnit,omitempty"`
	DeclareVolumeFloor       int32   `protobuf:"varint,21,opt,name=DeclareVolumeFloor,proto3" json:"DeclareVolumeFloor,omitempty"`
	DeclareVolumeCeiling     int32   `protobuf:"varint,22,opt,name=DeclareVolumeCeiling,proto3" json:"DeclareVolumeCeiling,omitempty"`
	PreClosePrice            float64 `protobuf:"fixed64,23,opt,name=PreClosePrice,proto3" json:"PreClosePrice,omitempty"`
	TickSize                 float64 `protobuf:"fixed64,24,opt,name=TickSize,proto3" json:"TickSize,omitempty"`
	UpDownLimitType          string  `protobuf:"bytes,25,opt,name=UpDownLimitType,proto3" json:"UpDownLimitType,omitempty"`
	PriceUpLimit             float64 `protobuf:"fixed64,26,opt,name=PriceUpLimit,proto3" json:"PriceUpLimit,omitempty"`
	PriceDownLimit           float64 `protobuf:"fixed64,27,opt,name=PriceDownLimit,proto3" json:"PriceDownLimit,omitempty"`
	XRRatio                  float64 `protobuf:"fixed64,28,opt,name=XRRatio,proto3" json:"XRRatio,omitempty"`
	XDAmount                 float64 `protobuf:"fixed64,29,opt,name=XDAmount,proto3" json:"XDAmount,omitempty"`
	CrdBuyUnderlying         string  `protobuf:"bytes,30,opt,name=CrdBuyUnderlying,proto3" json:"CrdBuyUnderlying,omitempty"`
	CrdSellUnderlying        string  `protobuf:"bytes,31,opt,name=CrdSellUnderlying,proto3" json:"CrdSellUnderlying,omitempty"`
	SecurityStatus           string  `protobuf:"bytes,32,opt,name=SecurityStatus,proto3" json:"SecurityStatus,omitempty"`
	SampleNo                 int32   `protobuf:"varint,33,opt,name=SampleNo,proto3" json:"SampleNo,omitempty"`
	SampleAvgPrice           float64 `protobuf:"fixed64,34,opt,name=SampleAvgPrice,proto3" json:"SampleAvgPrice,omitempty"`
	TradeAmount              float64 `protobuf:"fixed64,35,opt,name=TradeAmount,proto3" json:"TradeAmount,omitempty"`
	AvgCapital               float64 `protobuf:"fixed64,36,opt,name=AvgCapital,proto3" json:"AvgCapital,omitempty"`
	TotalMarketValue         float64 `protobuf:"fixed64,37,opt,name=TotalMarketValue,proto3" json:"TotalMarketValue,omitempty"`
	MarketValueRatio         float64 `protobuf:"fixed64,38,opt,name=MarketValueRatio,proto3" json:"MarketValueRatio,omitempty"`
	StaticPERatio            float64 `protobuf:"fixed64,39,opt,name=StaticPERatio,proto3" json:"StaticPERatio,omitempty"`
	IndexLevelStatus         string  `protobuf:"bytes,40,opt,name=IndexLevelStatus,proto3" json:"IndexLevelStatus,omitempty"`
	TradeDate                int32   `protobuf:"varint,41,opt,name=TradeDate,proto3" json:"TradeDate,omitempty"`
	GageUnderlying           string  `protobuf:"bytes,42,opt,name=GageUnderlying,proto3" json:"GageUnderlying,omitempty"`
	CrdBuyBalance            float64 `protobuf:"fixed64,43,opt,name=CrdBuyBalance,proto3" json:"CrdBuyBalance,omitempty"`
	CrdSellMargin            uint64  `protobuf:"varint,44,opt,name=CrdSellMargin,proto3" json:"CrdSellMargin,omitempty"`
	MktOrdCeiling            uint64  `protobuf:"varint,45,opt,name=MktOrdCeiling,proto3" json:"MktOrdCeiling,omitempty"`
	MktOrdFloor              uint64  `protobuf:"varint,46,opt,name=MktOrdFloor,proto3" json:"MktOrdFloor,omitempty"`
	OutstandingShare         uint64  `protobuf:"varint,47,opt,name=OutstandingShare,proto3" json:"OutstandingShare,omitempty"`
	CumulativeChgVolume      float64 `protobuf:"fixed64,48,opt,name=CumulativeChgVolume,proto3" json:"CumulativeChgVolume,omitempty"`
	CDRSecurityName          string  `protobuf:"bytes,49,opt,name=CDRSecurityName,proto3" json:"CDRSecurityName,omitempty"`
	CDRConvertBase           float64 `protobuf:"fixed64,50,opt,name=CDRConvertBase,proto3" json:"CDRConvertBase,omitempty"`
	UnderlyingConvertBase    float64 `protobuf:"fixed64,51,opt,name=UnderlyingConvertBase,proto3" json:"UnderlyingConvertBase,omitempty"`
	NameUnderlying           string  `protobuf:"bytes,52,opt,name=NameUnderlying,proto3" json:"NameUnderlying,omitempty"`
	DepositoryCode           string  `protobuf:"bytes,53,opt,name=DepositoryCode,proto3" json:"DepositoryCode,omitempty"`
	DepositoryName           string  `protobuf:"bytes,54,opt,name=DepositoryName,proto3" json:"DepositoryName,omitempty"`
	InitialDay               string  `protobuf:"bytes,55,opt,name=InitialDay,proto3" json:"InitialDay,omitempty"`
	TerminationDay           string  `protobuf:"bytes,56,opt,name=TerminationDay,proto3" json:"TerminationDay,omitempty"`
	GDRSecurityName          string  `protobuf:"bytes,57,opt,name=GDRSecurityName,proto3" json:"GDRSecurityName,omitempty"`
	ListingGDRSharesNo       int64   `protobuf:"varint,58,opt,name=ListingGDRSharesNo,proto3" json:"ListingGDRSharesNo,omitempty"`
	ListingUnderlyingStockNo uint64  `protobuf:"varint,59,opt,name=ListingUnderlyingStockNo,proto3" json:"ListingUnderlyingStockNo,omitempty"`
	NewSharesListingDate     string  `protobuf:"bytes,60,opt,name=NewSharesListingDate,proto3" json:"NewSharesListingDate,omitempty"`
	NewSharesReason          string  `protobuf:"bytes,61,opt,name=NewSharesReason,proto3" json:"NewSharesReason,omitempty"`
	GDRSwitchRatio           string  `protobuf:"bytes,62,opt,name=GDRSwitchRatio,proto3" json:"GDRSwitchRatio,omitempty"`
	CountryRegisterID        string  `protobuf:"bytes,63,opt,name=CountryRegisterID,proto3" json:"CountryRegisterID,omitempty"`
	MarketSegmentCode        string  `protobuf:"bytes,64,opt,name=MarketSegmentCode,proto3" json:"MarketSegmentCode,omitempty"`
	MarketSectorCode         string  `protobuf:"bytes,65,opt,name=MarketSectorCode,proto3" json:"MarketSectorCode,omitempty"`
	SEDOL                    string  `protobuf:"bytes,66,opt,name=SEDOL,proto3" json:"SEDOL,omitempty"`
	PreOpenPrice             float64 `protobuf:"fixed64,67,opt,name=PreOpenPrice,proto3" json:"PreOpenPrice,omitempty"`
	PreCloseBuyPrice01       float64 `protobuf:"fixed64,68,opt,name=PreCloseBuyPrice01,proto3" json:"PreCloseBuyPrice01,omitempty"`
	SybUndPreClosePrice      float64 `protobuf:"fixed64,69,opt,name=SybUndPreClosePrice,proto3" json:"SybUndPreClosePrice,omitempty"`
	PreCloseSellPrice01      float64 `protobuf:"fixed64,70,opt,name=PreCloseSellPrice01,proto3" json:"PreCloseSellPrice01,omitempty"`
	PreTotalVolume           uint64  `protobuf:"varint,71,opt,name=PreTotalVolume,proto3" json:"PreTotalVolume,omitempty"`
	PreTotalAmount           float64 `protobuf:"fixed64,72,opt,name=PreTotalAmount,proto3" json:"PreTotalAmount,omitempty"`
	PreTotalNo               uint64  `protobuf:"varint,73,opt,name=PreTotalNo,proto3" json:"PreTotalNo,omitempty"`
	PreHighPrice             float64 `protobuf:"fixed64,74,opt,name=PreHighPrice,proto3" json:"PreHighPrice,omitempty"`
	PreLowPrice              float64 `protobuf:"fixed64,75,opt,name=PreLowPrice,proto3" json:"PreLowPrice,omitempty"`
	PreNonAutoHighPrice      float64 `protobuf:"fixed64,76,opt,name=PreNonAutoHighPrice,proto3" json:"PreNonAutoHighPrice,omitempty"`
	PreNonAutoLowPrice       float64 `protobuf:"fixed64,77,opt,name=PreNonAutoLowPrice,proto3" json:"PreNonAutoLowPrice,omitempty"`
	YearHighPrice            float64 `protobuf:"fixed64,78,opt,name=YearHighPrice,proto3" json:"YearHighPrice,omitempty"`
	DateYearHighPrice        int32   `protobuf:"varint,79,opt,name=DateYearHighPrice,proto3" json:"DateYearHighPrice,omitempty"`
	YearLowPrice             float64 `protobuf:"fixed64,80,opt,name=YearLowPrice,proto3" json:"YearLowPrice,omitempty"`
	DateYearLowPrice         int32   `protobuf:"varint,81,opt,name=DateYearLowPrice,proto3" json:"DateYearLowPrice,omitempty"`
	YearNonAutoHighPrice     float64 `protobuf:"fixed64,82,opt,name=YearNonAutoHighPrice,proto3" json:"YearNonAutoHighPrice,omitempty"`
	DateYearNonAutoHighPrice int32   `protobuf:"varint,83,opt,name=DateYearNonAutoHighPrice,proto3" json:"DateYearNonAutoHighPrice,omitempty"`
	YearNonAutoLowPrice      float64 `protobuf:"fixed64,84,opt,name=YearNonAutoLowPrice,proto3" json:"YearNonAutoLowPrice,omitempty"`
	DateYearNonAutoLowPrice  int32   `protobuf:"varint,85,opt,name=DateYearNonAutoLowPrice,proto3" json:"DateYearNonAutoLowPrice,omitempty"`
	PreAveragePrice          float64 `protobuf:"fixed64,86,opt,name=PreAveragePrice,proto3" json:"PreAveragePrice,omitempty"`
	SecurityNameEx           string  `protobuf:"bytes,87,opt,name=SecurityNameEx,proto3" json:"SecurityNameEx,omitempty"`
}

func (x *UJU_SSEL2_BondStatic) Reset() {
	*x = UJU_SSEL2_BondStatic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdCurrent_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UJU_SSEL2_BondStatic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UJU_SSEL2_BondStatic) ProtoMessage() {}

func (x *UJU_SSEL2_BondStatic) ProtoReflect() protoreflect.Message {
	mi := &file_mdCurrent_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UJU_SSEL2_BondStatic.ProtoReflect.Descriptor instead.
func (*UJU_SSEL2_BondStatic) Descriptor() ([]byte, []int) {
	return file_mdCurrent_proto_rawDescGZIP(), []int{18}
}

func (x *UJU_SSEL2_BondStatic) GetLocalTimeStamp() int32 {
	if x != nil {
		return x.LocalTimeStamp
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetQuotationFlag() string {
	if x != nil {
		return x.QuotationFlag
	}
	return ""
}

func (x *UJU_SSEL2_BondStatic) GetPacketTimeStamp() int64 {
	if x != nil {
		return x.PacketTimeStamp
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *UJU_SSEL2_BondStatic) GetISINCode() string {
	if x != nil {
		return x.ISINCode
	}
	return ""
}

func (x *UJU_SSEL2_BondStatic) GetSecurityName() string {
	if x != nil {
		return x.SecurityName
	}
	return ""
}

func (x *UJU_SSEL2_BondStatic) GetSecurityEN() string {
	if x != nil {
		return x.SecurityEN
	}
	return ""
}

func (x *UJU_SSEL2_BondStatic) GetSymbolUnderlying() string {
	if x != nil {
		return x.SymbolUnderlying
	}
	return ""
}

func (x *UJU_SSEL2_BondStatic) GetMarketType() string {
	if x != nil {
		return x.MarketType
	}
	return ""
}

func (x *UJU_SSEL2_BondStatic) GetCFICode() string {
	if x != nil {
		return x.CFICode
	}
	return ""
}

func (x *UJU_SSEL2_BondStatic) GetSecuritySubType() string {
	if x != nil {
		return x.SecuritySubType
	}
	return ""
}

func (x *UJU_SSEL2_BondStatic) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *UJU_SSEL2_BondStatic) GetParValue() float64 {
	if x != nil {
		return x.ParValue
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetTradableNo() int64 {
	if x != nil {
		return x.TradableNo
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetEndDate() int32 {
	if x != nil {
		return x.EndDate
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetListingDate() int32 {
	if x != nil {
		return x.ListingDate
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetSetNo() int32 {
	if x != nil {
		return x.SetNo
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetBuyVolumeUnit() int32 {
	if x != nil {
		return x.BuyVolumeUnit
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetSellVolumeUnit() int32 {
	if x != nil {
		return x.SellVolumeUnit
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetDeclareVolumeFloor() int32 {
	if x != nil {
		return x.DeclareVolumeFloor
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetDeclareVolumeCeiling() int32 {
	if x != nil {
		return x.DeclareVolumeCeiling
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetPreClosePrice() float64 {
	if x != nil {
		return x.PreClosePrice
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetTickSize() float64 {
	if x != nil {
		return x.TickSize
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetUpDownLimitType() string {
	if x != nil {
		return x.UpDownLimitType
	}
	return ""
}

func (x *UJU_SSEL2_BondStatic) GetPriceUpLimit() float64 {
	if x != nil {
		return x.PriceUpLimit
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetPriceDownLimit() float64 {
	if x != nil {
		return x.PriceDownLimit
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetXRRatio() float64 {
	if x != nil {
		return x.XRRatio
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetXDAmount() float64 {
	if x != nil {
		return x.XDAmount
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetCrdBuyUnderlying() string {
	if x != nil {
		return x.CrdBuyUnderlying
	}
	return ""
}

func (x *UJU_SSEL2_BondStatic) GetCrdSellUnderlying() string {
	if x != nil {
		return x.CrdSellUnderlying
	}
	return ""
}

func (x *UJU_SSEL2_BondStatic) GetSecurityStatus() string {
	if x != nil {
		return x.SecurityStatus
	}
	return ""
}

func (x *UJU_SSEL2_BondStatic) GetSampleNo() int32 {
	if x != nil {
		return x.SampleNo
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetSampleAvgPrice() float64 {
	if x != nil {
		return x.SampleAvgPrice
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetTradeAmount() float64 {
	if x != nil {
		return x.TradeAmount
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetAvgCapital() float64 {
	if x != nil {
		return x.AvgCapital
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetTotalMarketValue() float64 {
	if x != nil {
		return x.TotalMarketValue
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetMarketValueRatio() float64 {
	if x != nil {
		return x.MarketValueRatio
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetStaticPERatio() float64 {
	if x != nil {
		return x.StaticPERatio
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetIndexLevelStatus() string {
	if x != nil {
		return x.IndexLevelStatus
	}
	return ""
}

func (x *UJU_SSEL2_BondStatic) GetTradeDate() int32 {
	if x != nil {
		return x.TradeDate
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetGageUnderlying() string {
	if x != nil {
		return x.GageUnderlying
	}
	return ""
}

func (x *UJU_SSEL2_BondStatic) GetCrdBuyBalance() float64 {
	if x != nil {
		return x.CrdBuyBalance
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetCrdSellMargin() uint64 {
	if x != nil {
		return x.CrdSellMargin
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetMktOrdCeiling() uint64 {
	if x != nil {
		return x.MktOrdCeiling
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetMktOrdFloor() uint64 {
	if x != nil {
		return x.MktOrdFloor
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetOutstandingShare() uint64 {
	if x != nil {
		return x.OutstandingShare
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetCumulativeChgVolume() float64 {
	if x != nil {
		return x.CumulativeChgVolume
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetCDRSecurityName() string {
	if x != nil {
		return x.CDRSecurityName
	}
	return ""
}

func (x *UJU_SSEL2_BondStatic) GetCDRConvertBase() float64 {
	if x != nil {
		return x.CDRConvertBase
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetUnderlyingConvertBase() float64 {
	if x != nil {
		return x.UnderlyingConvertBase
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetNameUnderlying() string {
	if x != nil {
		return x.NameUnderlying
	}
	return ""
}

func (x *UJU_SSEL2_BondStatic) GetDepositoryCode() string {
	if x != nil {
		return x.DepositoryCode
	}
	return ""
}

func (x *UJU_SSEL2_BondStatic) GetDepositoryName() string {
	if x != nil {
		return x.DepositoryName
	}
	return ""
}

func (x *UJU_SSEL2_BondStatic) GetInitialDay() string {
	if x != nil {
		return x.InitialDay
	}
	return ""
}

func (x *UJU_SSEL2_BondStatic) GetTerminationDay() string {
	if x != nil {
		return x.TerminationDay
	}
	return ""
}

func (x *UJU_SSEL2_BondStatic) GetGDRSecurityName() string {
	if x != nil {
		return x.GDRSecurityName
	}
	return ""
}

func (x *UJU_SSEL2_BondStatic) GetListingGDRSharesNo() int64 {
	if x != nil {
		return x.ListingGDRSharesNo
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetListingUnderlyingStockNo() uint64 {
	if x != nil {
		return x.ListingUnderlyingStockNo
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetNewSharesListingDate() string {
	if x != nil {
		return x.NewSharesListingDate
	}
	return ""
}

func (x *UJU_SSEL2_BondStatic) GetNewSharesReason() string {
	if x != nil {
		return x.NewSharesReason
	}
	return ""
}

func (x *UJU_SSEL2_BondStatic) GetGDRSwitchRatio() string {
	if x != nil {
		return x.GDRSwitchRatio
	}
	return ""
}

func (x *UJU_SSEL2_BondStatic) GetCountryRegisterID() string {
	if x != nil {
		return x.CountryRegisterID
	}
	return ""
}

func (x *UJU_SSEL2_BondStatic) GetMarketSegmentCode() string {
	if x != nil {
		return x.MarketSegmentCode
	}
	return ""
}

func (x *UJU_SSEL2_BondStatic) GetMarketSectorCode() string {
	if x != nil {
		return x.MarketSectorCode
	}
	return ""
}

func (x *UJU_SSEL2_BondStatic) GetSEDOL() string {
	if x != nil {
		return x.SEDOL
	}
	return ""
}

func (x *UJU_SSEL2_BondStatic) GetPreOpenPrice() float64 {
	if x != nil {
		return x.PreOpenPrice
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetPreCloseBuyPrice01() float64 {
	if x != nil {
		return x.PreCloseBuyPrice01
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetSybUndPreClosePrice() float64 {
	if x != nil {
		return x.SybUndPreClosePrice
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetPreCloseSellPrice01() float64 {
	if x != nil {
		return x.PreCloseSellPrice01
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetPreTotalVolume() uint64 {
	if x != nil {
		return x.PreTotalVolume
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetPreTotalAmount() float64 {
	if x != nil {
		return x.PreTotalAmount
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetPreTotalNo() uint64 {
	if x != nil {
		return x.PreTotalNo
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetPreHighPrice() float64 {
	if x != nil {
		return x.PreHighPrice
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetPreLowPrice() float64 {
	if x != nil {
		return x.PreLowPrice
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetPreNonAutoHighPrice() float64 {
	if x != nil {
		return x.PreNonAutoHighPrice
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetPreNonAutoLowPrice() float64 {
	if x != nil {
		return x.PreNonAutoLowPrice
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetYearHighPrice() float64 {
	if x != nil {
		return x.YearHighPrice
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetDateYearHighPrice() int32 {
	if x != nil {
		return x.DateYearHighPrice
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetYearLowPrice() float64 {
	if x != nil {
		return x.YearLowPrice
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetDateYearLowPrice() int32 {
	if x != nil {
		return x.DateYearLowPrice
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetYearNonAutoHighPrice() float64 {
	if x != nil {
		return x.YearNonAutoHighPrice
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetDateYearNonAutoHighPrice() int32 {
	if x != nil {
		return x.DateYearNonAutoHighPrice
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetYearNonAutoLowPrice() float64 {
	if x != nil {
		return x.YearNonAutoLowPrice
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetDateYearNonAutoLowPrice() int32 {
	if x != nil {
		return x.DateYearNonAutoLowPrice
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetPreAveragePrice() float64 {
	if x != nil {
		return x.PreAveragePrice
	}
	return 0
}

func (x *UJU_SSEL2_BondStatic) GetSecurityNameEx() string {
	if x != nil {
		return x.SecurityNameEx
	}
	return ""
}

// 上交所逐笔成交
type UJU_SSEL2_Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalTimeStamp  int32   `protobuf:"varint,1,opt,name=LocalTimeStamp,proto3" json:"LocalTimeStamp,omitempty"`
	QuotationFlag   string  `protobuf:"bytes,2,opt,name=QuotationFlag,proto3" json:"QuotationFlag,omitempty"`
	PacketTimeStamp int64   `protobuf:"zigzag64,3,opt,name=PacketTimeStamp,proto3" json:"PacketTimeStamp,omitempty"`
	TradeTime       int32   `protobuf:"varint,4,opt,name=TradeTime,proto3" json:"TradeTime,omitempty"`
	RecID           uint32  `protobuf:"varint,5,opt,name=RecID,proto3" json:"RecID,omitempty"`
	TradeChannel    int32   `protobuf:"varint,6,opt,name=TradeChannel,proto3" json:"TradeChannel,omitempty"`
	Symbol          string  `protobuf:"bytes,7,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	TradePrice      float64 `protobuf:"fixed64,8,opt,name=TradePrice,proto3" json:"TradePrice,omitempty"`
	TradeVolume     uint32  `protobuf:"varint,9,opt,name=TradeVolume,proto3" json:"TradeVolume,omitempty"`
	TradeAmount     float64 `protobuf:"fixed64,10,opt,name=TradeAmount,proto3" json:"TradeAmount,omitempty"`
	BuyRecID        int64   `protobuf:"varint,11,opt,name=BuyRecID,proto3" json:"BuyRecID,omitempty"`
	SellRecID       int64   `protobuf:"varint,12,opt,name=SellRecID,proto3" json:"SellRecID,omitempty"`
	BuySellFlag     string  `protobuf:"bytes,13,opt,name=BuySellFlag,proto3" json:"BuySellFlag,omitempty"`
	RecNO           int64   `protobuf:"varint,14,opt,name=RecNO,proto3" json:"RecNO,omitempty"`
}

func (x *UJU_SSEL2_Transaction) Reset() {
	*x = UJU_SSEL2_Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdCurrent_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UJU_SSEL2_Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UJU_SSEL2_Transaction) ProtoMessage() {}

func (x *UJU_SSEL2_Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_mdCurrent_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UJU_SSEL2_Transaction.ProtoReflect.Descriptor instead.
func (*UJU_SSEL2_Transaction) Descriptor() ([]byte, []int) {
	return file_mdCurrent_proto_rawDescGZIP(), []int{19}
}

func (x *UJU_SSEL2_Transaction) GetLocalTimeStamp() int32 {
	if x != nil {
		return x.LocalTimeStamp
	}
	return 0
}

func (x *UJU_SSEL2_Transaction) GetQuotationFlag() string {
	if x != nil {
		return x.QuotationFlag
	}
	return ""
}

func (x *UJU_SSEL2_Transaction) GetPacketTimeStamp() int64 {
	if x != nil {
		return x.PacketTimeStamp
	}
	return 0
}

func (x *UJU_SSEL2_Transaction) GetTradeTime() int32 {
	if x != nil {
		return x.TradeTime
	}
	return 0
}

func (x *UJU_SSEL2_Transaction) GetRecID() uint32 {
	if x != nil {
		return x.RecID
	}
	return 0
}

func (x *UJU_SSEL2_Transaction) GetTradeChannel() int32 {
	if x != nil {
		return x.TradeChannel
	}
	return 0
}

func (x *UJU_SSEL2_Transaction) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *UJU_SSEL2_Transaction) GetTradePrice() float64 {
	if x != nil {
		return x.TradePrice
	}
	return 0
}

func (x *UJU_SSEL2_Transaction) GetTradeVolume() uint32 {
	if x != nil {
		return x.TradeVolume
	}
	return 0
}

func (x *UJU_SSEL2_Transaction) GetTradeAmount() float64 {
	if x != nil {
		return x.TradeAmount
	}
	return 0
}

func (x *UJU_SSEL2_Transaction) GetBuyRecID() int64 {
	if x != nil {
		return x.BuyRecID
	}
	return 0
}

func (x *UJU_SSEL2_Transaction) GetSellRecID() int64 {
	if x != nil {
		return x.SellRecID
	}
	return 0
}

func (x *UJU_SSEL2_Transaction) GetBuySellFlag() string {
	if x != nil {
		return x.BuySellFlag
	}
	return ""
}

func (x *UJU_SSEL2_Transaction) GetRecNO() int64 {
	if x != nil {
		return x.RecNO
	}
	return 0
}

// 上交所逐笔委托
type UJU_SSEL2_Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalTimeStamp  int32   `protobuf:"varint,1,opt,name=LocalTimeStamp,proto3" json:"LocalTimeStamp,omitempty"`
	QuotationFlag   string  `protobuf:"bytes,2,opt,name=QuotationFlag,proto3" json:"QuotationFlag,omitempty"`
	PacketTimeStamp int64   `protobuf:"varint,3,opt,name=PacketTimeStamp,proto3" json:"PacketTimeStamp,omitempty"`
	RecID           uint32  `protobuf:"varint,4,opt,name=RecID,proto3" json:"RecID,omitempty"`
	SetID           int32   `protobuf:"varint,5,opt,name=setID,proto3" json:"setID,omitempty"`
	Symbol          string  `protobuf:"bytes,6,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	Time            int32   `protobuf:"varint,7,opt,name=Time,proto3" json:"Time,omitempty"`
	OrderType       string  `protobuf:"bytes,8,opt,name=OrderType,proto3" json:"OrderType,omitempty"`
	OrderID         int64   `protobuf:"varint,9,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
	OrderPrice      float64 `protobuf:"fixed64,10,opt,name=OrderPrice,proto3" json:"OrderPrice,omitempty"`
	Balance         float64 `protobuf:"fixed64,11,opt,name=Balance,proto3" json:"Balance,omitempty"`
	OrderCode       string  `protobuf:"bytes,12,opt,name=OrderCode,proto3" json:"OrderCode,omitempty"`
	RecNO           int64   `protobuf:"varint,13,opt,name=RecNO,proto3" json:"RecNO,omitempty"`
}

func (x *UJU_SSEL2_Order) Reset() {
	*x = UJU_SSEL2_Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdCurrent_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UJU_SSEL2_Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UJU_SSEL2_Order) ProtoMessage() {}

func (x *UJU_SSEL2_Order) ProtoReflect() protoreflect.Message {
	mi := &file_mdCurrent_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UJU_SSEL2_Order.ProtoReflect.Descriptor instead.
func (*UJU_SSEL2_Order) Descriptor() ([]byte, []int) {
	return file_mdCurrent_proto_rawDescGZIP(), []int{20}
}

func (x *UJU_SSEL2_Order) GetLocalTimeStamp() int32 {
	if x != nil {
		return x.LocalTimeStamp
	}
	return 0
}

func (x *UJU_SSEL2_Order) GetQuotationFlag() string {
	if x != nil {
		return x.QuotationFlag
	}
	return ""
}

func (x *UJU_SSEL2_Order) GetPacketTimeStamp() int64 {
	if x != nil {
		return x.PacketTimeStamp
	}
	return 0
}

func (x *UJU_SSEL2_Order) GetRecID() uint32 {
	if x != nil {
		return x.RecID
	}
	return 0
}

func (x *UJU_SSEL2_Order) GetSetID() int32 {
	if x != nil {
		return x.SetID
	}
	return 0
}

func (x *UJU_SSEL2_Order) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *UJU_SSEL2_Order) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *UJU_SSEL2_Order) GetOrderType() string {
	if x != nil {
		return x.OrderType
	}
	return ""
}

func (x *UJU_SSEL2_Order) GetOrderID() int64 {
	if x != nil {
		return x.OrderID
	}
	return 0
}

func (x *UJU_SSEL2_Order) GetOrderPrice() float64 {
	if x != nil {
		return x.OrderPrice
	}
	return 0
}

func (x *UJU_SSEL2_Order) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *UJU_SSEL2_Order) GetOrderCode() string {
	if x != nil {
		return x.OrderCode
	}
	return ""
}

func (x *UJU_SSEL2_Order) GetRecNO() int64 {
	if x != nil {
		return x.RecNO
	}
	return 0
}

// 上交所债券逐笔行情
type UJU_SSEL2_BondTick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalTimeStamp  int32   `protobuf:"varint,1,opt,name=LocalTimeStamp,proto3" json:"LocalTimeStamp,omitempty"`
	QuotationFlag   string  `protobuf:"bytes,2,opt,name=QuotationFlag,proto3" json:"QuotationFlag,omitempty"`
	PacketTimeStamp int64   `protobuf:"varint,3,opt,name=PacketTimeStamp,proto3" json:"PacketTimeStamp,omitempty"`
	TickTime        int32   `protobuf:"varint,4,opt,name=TickTime,proto3" json:"TickTime,omitempty"`
	RecID           uint32  `protobuf:"varint,5,opt,name=RecID,proto3" json:"RecID,omitempty"`
	Channel         int32   `protobuf:"varint,6,opt,name=Channel,proto3" json:"Channel,omitempty"`
	Symbol          string  `protobuf:"bytes,7,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	TickPrice       float64 `protobuf:"fixed64,8,opt,name=TickPrice,proto3" json:"TickPrice,omitempty"`
	TickVolume      uint32  `protobuf:"varint,9,opt,name=TickVolume,proto3" json:"TickVolume,omitempty"`
	TradeAmount     float64 `protobuf:"fixed64,10,opt,name=TradeAmount,proto3" json:"TradeAmount,omitempty"`
	TickBSFlag      string  `protobuf:"bytes,11,opt,name=TickBSFlag,proto3" json:"TickBSFlag,omitempty"`
	TickType        string  `protobuf:"bytes,12,opt,name=TickType,proto3" json:"TickType,omitempty"`
	BuyOrderNO      string  `protobuf:"bytes,13,opt,name=BuyOrderNO,proto3" json:"BuyOrderNO,omitempty"`
	SellOrderNO     int64   `protobuf:"varint,14,opt,name=SellOrderNO,proto3" json:"SellOrderNO,omitempty"`
}

func (x *UJU_SSEL2_BondTick) Reset() {
	*x = UJU_SSEL2_BondTick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdCurrent_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UJU_SSEL2_BondTick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UJU_SSEL2_BondTick) ProtoMessage() {}

func (x *UJU_SSEL2_BondTick) ProtoReflect() protoreflect.Message {
	mi := &file_mdCurrent_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UJU_SSEL2_BondTick.ProtoReflect.Descriptor instead.
func (*UJU_SSEL2_BondTick) Descriptor() ([]byte, []int) {
	return file_mdCurrent_proto_rawDescGZIP(), []int{21}
}

func (x *UJU_SSEL2_BondTick) GetLocalTimeStamp() int32 {
	if x != nil {
		return x.LocalTimeStamp
	}
	return 0
}

func (x *UJU_SSEL2_BondTick) GetQuotationFlag() string {
	if x != nil {
		return x.QuotationFlag
	}
	return ""
}

func (x *UJU_SSEL2_BondTick) GetPacketTimeStamp() int64 {
	if x != nil {
		return x.PacketTimeStamp
	}
	return 0
}

func (x *UJU_SSEL2_BondTick) GetTickTime() int32 {
	if x != nil {
		return x.TickTime
	}
	return 0
}

func (x *UJU_SSEL2_BondTick) GetRecID() uint32 {
	if x != nil {
		return x.RecID
	}
	return 0
}

func (x *UJU_SSEL2_BondTick) GetChannel() int32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *UJU_SSEL2_BondTick) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *UJU_SSEL2_BondTick) GetTickPrice() float64 {
	if x != nil {
		return x.TickPrice
	}
	return 0
}

func (x *UJU_SSEL2_BondTick) GetTickVolume() uint32 {
	if x != nil {
		return x.TickVolume
	}
	return 0
}

func (x *UJU_SSEL2_BondTick) GetTradeAmount() float64 {
	if x != nil {
		return x.TradeAmount
	}
	return 0
}

func (x *UJU_SSEL2_BondTick) GetTickBSFlag() string {
	if x != nil {
		return x.TickBSFlag
	}
	return ""
}

func (x *UJU_SSEL2_BondTick) GetTickType() string {
	if x != nil {
		return x.TickType
	}
	return ""
}

func (x *UJU_SSEL2_BondTick) GetBuyOrderNO() string {
	if x != nil {
		return x.BuyOrderNO
	}
	return ""
}

func (x *UJU_SSEL2_BondTick) GetSellOrderNO() int64 {
	if x != nil {
		return x.SellOrderNO
	}
	return 0
}

// 深交所逐笔委托
type UJU_SZSEL2_Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalTimeStamp int32   `protobuf:"varint,1,opt,name=LocalTimeStamp,proto3" json:"LocalTimeStamp,omitempty"`
	QuotationFlag  string  `protobuf:"bytes,2,opt,name=QuotationFlag,proto3" json:"QuotationFlag,omitempty"`
	SetID          uint32  `protobuf:"varint,3,opt,name=SetID,proto3" json:"SetID,omitempty"`
	RecID          uint64  `protobuf:"varint,4,opt,name=RecID,proto3" json:"RecID,omitempty"`
	Symbol         string  `protobuf:"bytes,5,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	SymbolSource   string  `protobuf:"bytes,6,opt,name=SymbolSource,proto3" json:"SymbolSource,omitempty"`
	Time           int64   `protobuf:"varint,7,opt,name=Time,proto3" json:"Time,omitempty"`
	OrderPrice     float64 `protobuf:"fixed64,8,opt,name=OrderPrice,proto3" json:"OrderPrice,omitempty"`
	OrderVolume    float64 `protobuf:"fixed64,9,opt,name=OrderVolume,proto3" json:"OrderVolume,omitempty"`
	OrderCode      string  `protobuf:"bytes,10,opt,name=OrderCode,proto3" json:"OrderCode,omitempty"`
	OrderType      string  `protobuf:"bytes,11,opt,name=OrderType,proto3" json:"OrderType,omitempty"`
}

func (x *UJU_SZSEL2_Order) Reset() {
	*x = UJU_SZSEL2_Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdCurrent_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UJU_SZSEL2_Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UJU_SZSEL2_Order) ProtoMessage() {}

func (x *UJU_SZSEL2_Order) ProtoReflect() protoreflect.Message {
	mi := &file_mdCurrent_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UJU_SZSEL2_Order.ProtoReflect.Descriptor instead.
func (*UJU_SZSEL2_Order) Descriptor() ([]byte, []int) {
	return file_mdCurrent_proto_rawDescGZIP(), []int{22}
}

func (x *UJU_SZSEL2_Order) GetLocalTimeStamp() int32 {
	if x != nil {
		return x.LocalTimeStamp
	}
	return 0
}

func (x *UJU_SZSEL2_Order) GetQuotationFlag() string {
	if x != nil {
		return x.QuotationFlag
	}
	return ""
}

func (x *UJU_SZSEL2_Order) GetSetID() uint32 {
	if x != nil {
		return x.SetID
	}
	return 0
}

func (x *UJU_SZSEL2_Order) GetRecID() uint64 {
	if x != nil {
		return x.RecID
	}
	return 0
}

func (x *UJU_SZSEL2_Order) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *UJU_SZSEL2_Order) GetSymbolSource() string {
	if x != nil {
		return x.SymbolSource
	}
	return ""
}

func (x *UJU_SZSEL2_Order) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *UJU_SZSEL2_Order) GetOrderPrice() float64 {
	if x != nil {
		return x.OrderPrice
	}
	return 0
}

func (x *UJU_SZSEL2_Order) GetOrderVolume() float64 {
	if x != nil {
		return x.OrderVolume
	}
	return 0
}

func (x *UJU_SZSEL2_Order) GetOrderCode() string {
	if x != nil {
		return x.OrderCode
	}
	return ""
}

func (x *UJU_SZSEL2_Order) GetOrderType() string {
	if x != nil {
		return x.OrderType
	}
	return ""
}

// 深交所逐笔成交
type UJU_SZSEL2_Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalTimeStamp int32   `protobuf:"varint,1,opt,name=LocalTimeStamp,proto3" json:"LocalTimeStamp,omitempty"`
	QuotationFlag  string  `protobuf:"bytes,2,opt,name=QuotationFlag,proto3" json:"QuotationFlag,omitempty"`
	SetID          uint32  `protobuf:"varint,3,opt,name=SetID,proto3" json:"SetID,omitempty"`
	RecID          uint64  `protobuf:"varint,4,opt,name=RecID,proto3" json:"RecID,omitempty"`
	BuyOrderID     uint64  `protobuf:"varint,5,opt,name=BuyOrderID,proto3" json:"BuyOrderID,omitempty"`
	SellOrderID    uint64  `protobuf:"varint,6,opt,name=SellOrderID,proto3" json:"SellOrderID,omitempty"`
	Symbol         string  `protobuf:"bytes,7,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	SymbolSource   string  `protobuf:"bytes,8,opt,name=SymbolSource,proto3" json:"SymbolSource,omitempty"`
	TradeTime      int64   `protobuf:"varint,9,opt,name=TradeTime,proto3" json:"TradeTime,omitempty"`
	TradePrice     float64 `protobuf:"fixed64,10,opt,name=TradePrice,proto3" json:"TradePrice,omitempty"`
	TradeVolume    float64 `protobuf:"fixed64,11,opt,name=TradeVolume,proto3" json:"TradeVolume,omitempty"`
	TradeType      string  `protobuf:"bytes,12,opt,name=TradeType,proto3" json:"TradeType,omitempty"`
}

func (x *UJU_SZSEL2_Transaction) Reset() {
	*x = UJU_SZSEL2_Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdCurrent_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UJU_SZSEL2_Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UJU_SZSEL2_Transaction) ProtoMessage() {}

func (x *UJU_SZSEL2_Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_mdCurrent_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UJU_SZSEL2_Transaction.ProtoReflect.Descriptor instead.
func (*UJU_SZSEL2_Transaction) Descriptor() ([]byte, []int) {
	return file_mdCurrent_proto_rawDescGZIP(), []int{23}
}

func (x *UJU_SZSEL2_Transaction) GetLocalTimeStamp() int32 {
	if x != nil {
		return x.LocalTimeStamp
	}
	return 0
}

func (x *UJU_SZSEL2_Transaction) GetQuotationFlag() string {
	if x != nil {
		return x.QuotationFlag
	}
	return ""
}

func (x *UJU_SZSEL2_Transaction) GetSetID() uint32 {
	if x != nil {
		return x.SetID
	}
	return 0
}

func (x *UJU_SZSEL2_Transaction) GetRecID() uint64 {
	if x != nil {
		return x.RecID
	}
	return 0
}

func (x *UJU_SZSEL2_Transaction) GetBuyOrderID() uint64 {
	if x != nil {
		return x.BuyOrderID
	}
	return 0
}

func (x *UJU_SZSEL2_Transaction) GetSellOrderID() uint64 {
	if x != nil {
		return x.SellOrderID
	}
	return 0
}

func (x *UJU_SZSEL2_Transaction) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *UJU_SZSEL2_Transaction) GetSymbolSource() string {
	if x != nil {
		return x.SymbolSource
	}
	return ""
}

func (x *UJU_SZSEL2_Transaction) GetTradeTime() int64 {
	if x != nil {
		return x.TradeTime
	}
	return 0
}

func (x *UJU_SZSEL2_Transaction) GetTradePrice() float64 {
	if x != nil {
		return x.TradePrice
	}
	return 0
}

func (x *UJU_SZSEL2_Transaction) GetTradeVolume() float64 {
	if x != nil {
		return x.TradeVolume
	}
	return 0
}

func (x *UJU_SZSEL2_Transaction) GetTradeType() string {
	if x != nil {
		return x.TradeType
	}
	return ""
}

// 深交所逐笔行情
type UJU_SZSEL2_Tick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalTimeStamp int32   `protobuf:"varint,1,opt,name=LocalTimeStamp,proto3" json:"LocalTimeStamp,omitempty"`
	QuotationFlag  string  `protobuf:"bytes,2,opt,name=QuotationFlag,proto3" json:"QuotationFlag,omitempty"`
	SetID          uint32  `protobuf:"varint,3,opt,name=SetID,proto3" json:"SetID,omitempty"`
	RecID          uint64  `protobuf:"varint,4,opt,name=RecID,proto3" json:"RecID,omitempty"`
	Symbol         string  `protobuf:"bytes,5,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	SymbolSource   string  `protobuf:"bytes,6,opt,name=SymbolSource,proto3" json:"SymbolSource,omitempty"`
	Time           int64   `protobuf:"varint,7,opt,name=Time,proto3" json:"Time,omitempty"`
	TickPrice      float64 `protobuf:"fixed64,8,opt,name=TickPrice,proto3" json:"TickPrice,omitempty"`
	TickVolume     float64 `protobuf:"fixed64,9,opt,name=TickVolume,proto3" json:"TickVolume,omitempty"`
	OrderCode      string  `protobuf:"bytes,10,opt,name=OrderCode,proto3" json:"OrderCode,omitempty"`
	TickType       string  `protobuf:"bytes,11,opt,name=TickType,proto3" json:"TickType,omitempty"`
	BuyOrderID     uint64  `protobuf:"varint,12,opt,name=BuyOrderID,proto3" json:"BuyOrderID,omitempty"`
	SellOrderID    uint64  `protobuf:"varint,13,opt,name=SellOrderID,proto3" json:"SellOrderID,omitempty"`
	OOrT           string  `protobuf:"bytes,14,opt,name=OOrT,proto3" json:"OOrT,omitempty"`
}

func (x *UJU_SZSEL2_Tick) Reset() {
	*x = UJU_SZSEL2_Tick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdCurrent_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UJU_SZSEL2_Tick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UJU_SZSEL2_Tick) ProtoMessage() {}

func (x *UJU_SZSEL2_Tick) ProtoReflect() protoreflect.Message {
	mi := &file_mdCurrent_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UJU_SZSEL2_Tick.ProtoReflect.Descriptor instead.
func (*UJU_SZSEL2_Tick) Descriptor() ([]byte, []int) {
	return file_mdCurrent_proto_rawDescGZIP(), []int{24}
}

func (x *UJU_SZSEL2_Tick) GetLocalTimeStamp() int32 {
	if x != nil {
		return x.LocalTimeStamp
	}
	return 0
}

func (x *UJU_SZSEL2_Tick) GetQuotationFlag() string {
	if x != nil {
		return x.QuotationFlag
	}
	return ""
}

func (x *UJU_SZSEL2_Tick) GetSetID() uint32 {
	if x != nil {
		return x.SetID
	}
	return 0
}

func (x *UJU_SZSEL2_Tick) GetRecID() uint64 {
	if x != nil {
		return x.RecID
	}
	return 0
}

func (x *UJU_SZSEL2_Tick) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *UJU_SZSEL2_Tick) GetSymbolSource() string {
	if x != nil {
		return x.SymbolSource
	}
	return ""
}

func (x *UJU_SZSEL2_Tick) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *UJU_SZSEL2_Tick) GetTickPrice() float64 {
	if x != nil {
		return x.TickPrice
	}
	return 0
}

func (x *UJU_SZSEL2_Tick) GetTickVolume() float64 {
	if x != nil {
		return x.TickVolume
	}
	return 0
}

func (x *UJU_SZSEL2_Tick) GetOrderCode() string {
	if x != nil {
		return x.OrderCode
	}
	return ""
}

func (x *UJU_SZSEL2_Tick) GetTickType() string {
	if x != nil {
		return x.TickType
	}
	return ""
}

func (x *UJU_SZSEL2_Tick) GetBuyOrderID() uint64 {
	if x != nil {
		return x.BuyOrderID
	}
	return 0
}

func (x *UJU_SZSEL2_Tick) GetSellOrderID() uint64 {
	if x != nil {
		return x.SellOrderID
	}
	return 0
}

func (x *UJU_SZSEL2_Tick) GetOOrT() string {
	if x != nil {
		return x.OOrT
	}
	return ""
}

var File_mdCurrent_proto protoreflect.FileDescriptor

var file_mdCurrent_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6d, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x6d, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xe9, 0x02, 0x0a,
	0x0c, 0x4e, 0x65, 0x74, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x6d, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x47,
	0x0a, 0x10, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x64, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x10, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4d, 0x0a, 0x12, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2e,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x12, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x50, 0x0a, 0x13, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2e,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x13, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x9e, 0x02, 0x0a, 0x06, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x72, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x7c, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52,
	0x45, 0x51, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x52, 0x45, 0x53, 0x50, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x4e, 0x45, 0x5f, 0x57, 0x41,
	0x59, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x51,
	0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x50,
	0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x48, 0x45, 0x41, 0x52, 0x54, 0x42, 0x45, 0x41, 0x54, 0x5f,
	0x52, 0x45, 0x51, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x45, 0x41, 0x52, 0x54, 0x42, 0x45,
	0x41, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x06, 0x22, 0x45, 0x0a, 0x0f, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x73, 0x73, 0x77, 0x64,
	0x22, 0x83, 0x01, 0x0a, 0x10, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6d, 0x64, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x24, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x46, 0x41, 0x49, 0x4c, 0x10, 0x01, 0x22, 0x6e, 0x0a, 0x12, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb5, 0x0a, 0x0a, 0x13, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x13, 0x75, 0x6a,
	0x75, 0x5f, 0x74, 0x64, 0x66, 0x5f, 0x62, 0x62, 0x71, 0x62, 0x69, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x64, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x2e, 0x55, 0x4a, 0x55, 0x5f, 0x54, 0x44, 0x46, 0x5f, 0x42, 0x42, 0x51, 0x42,
	0x49, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x52, 0x10, 0x75, 0x6a, 0x75, 0x54, 0x64, 0x66, 0x42,
	0x62, 0x71, 0x62, 0x69, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x57, 0x0a, 0x16, 0x75, 0x6a, 0x75,
	0x5f, 0x74, 0x64, 0x66, 0x5f, 0x62, 0x62, 0x71, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x64, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x4a, 0x55, 0x5f, 0x54, 0x44, 0x46, 0x5f, 0x42, 0x42,
	0x51, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x14, 0x75, 0x6a,
	0x75, 0x54, 0x64, 0x66, 0x42, 0x62, 0x71, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x14, 0x75, 0x6a, 0x75, 0x5f, 0x74, 0x64, 0x66, 0x5f, 0x62, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6d, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x4a, 0x55,
	0x5f, 0x54, 0x44, 0x46, 0x5f, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x55,
	0x45, 0x52, 0x11, 0x75, 0x6a, 0x75, 0x54, 0x64, 0x66, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x12, 0x4d, 0x0a, 0x13, 0x75, 0x6a, 0x75, 0x5f, 0x74, 0x64, 0x66, 0x5f,
	0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x4a,
	0x55, 0x5f, 0x54, 0x44, 0x46, 0x5f, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x52, 0x10, 0x75, 0x6a, 0x75, 0x54, 0x64, 0x66, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x4a, 0x0a, 0x12, 0x75, 0x6a, 0x75, 0x5f, 0x74, 0x64, 0x66, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6d, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x4a, 0x55, 0x5f,
	0x54, 0x44, 0x46, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x52, 0x0f,
	0x75, 0x6a, 0x75, 0x54, 0x64, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x5e, 0x0a, 0x19, 0x75, 0x6a, 0x75, 0x5f, 0x74, 0x64, 0x66, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2e, 0x55,
	0x4a, 0x55, 0x5f, 0x54, 0x44, 0x46, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x4c,
	0x4f, 0x53, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x52, 0x15, 0x75, 0x6a, 0x75, 0x54, 0x64, 0x66,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x4d, 0x0a, 0x13, 0x75, 0x6a, 0x75, 0x5f, 0x74, 0x64, 0x66, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d,
	0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x4a, 0x55, 0x5f, 0x54, 0x44, 0x46,
	0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x52, 0x10, 0x75, 0x6a,
	0x75, 0x54, 0x64, 0x66, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4d,
	0x0a, 0x13, 0x75, 0x6a, 0x75, 0x5f, 0x74, 0x64, 0x66, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x64,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x4a, 0x55, 0x5f, 0x54, 0x44, 0x46, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x52, 0x10, 0x75, 0x6a, 0x75,
	0x54, 0x64, 0x66, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x3c, 0x0a,
	0x0d, 0x75, 0x6a, 0x75, 0x5f, 0x74, 0x64, 0x66, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x2e, 0x55, 0x4a, 0x55, 0x5f, 0x54, 0x44, 0x46, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x52, 0x0b,
	0x75, 0x6a, 0x75, 0x54, 0x64, 0x66, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x13, 0x75,
	0x6a, 0x75, 0x5f, 0x74, 0x64, 0x66, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x64, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x4a, 0x55, 0x5f, 0x54, 0x44, 0x46, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x11, 0x75, 0x6a, 0x75, 0x54, 0x64, 0x66,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x73, 0x12, 0x54, 0x0a, 0x15, 0x75, 0x6a, 0x75, 0x5f, 0x73, 0x73, 0x65, 0x6c, 0x32,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2e, 0x55,
	0x4a, 0x55, 0x5f, 0x53, 0x53, 0x45, 0x4c, 0x32, 0x5f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x75, 0x6a, 0x75, 0x53, 0x73, 0x65, 0x6c, 0x32, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0f, 0x75, 0x6a, 0x75,
	0x5f, 0x73, 0x73, 0x65, 0x6c, 0x32, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2e, 0x55,
	0x4a, 0x55, 0x5f, 0x53, 0x53, 0x45, 0x4c, 0x32, 0x5f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0d,
	0x75, 0x6a, 0x75, 0x53, 0x73, 0x65, 0x6c, 0x32, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x4b, 0x0a,
	0x12, 0x75, 0x6a, 0x75, 0x5f, 0x73, 0x73, 0x65, 0x6c, 0x32, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x74,
	0x69, 0x63, 0x6b, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x64, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x4a, 0x55, 0x5f, 0x53, 0x53, 0x45, 0x4c, 0x32, 0x5f,
	0x42, 0x6f, 0x6e, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x52, 0x10, 0x75, 0x6a, 0x75, 0x53, 0x73, 0x65,
	0x6c, 0x32, 0x42, 0x6f, 0x6e, 0x64, 0x74, 0x69, 0x63, 0x6b, 0x12, 0x45, 0x0a, 0x10, 0x75, 0x6a,
	0x75, 0x5f, 0x73, 0x7a, 0x73, 0x65, 0x6c, 0x32, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x2e, 0x55, 0x4a, 0x55, 0x5f, 0x53, 0x5a, 0x53, 0x45, 0x4c, 0x32, 0x5f, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x0e, 0x75, 0x6a, 0x75, 0x53, 0x7a, 0x73, 0x65, 0x6c, 0x32, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x57, 0x0a, 0x16, 0x75, 0x6a, 0x75, 0x5f, 0x73, 0x7a, 0x73, 0x65, 0x6c, 0x32, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x4a,
	0x55, 0x5f, 0x53, 0x5a, 0x53, 0x45, 0x4c, 0x32, 0x5f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x75, 0x6a, 0x75, 0x53, 0x7a, 0x73, 0x65, 0x6c, 0x32, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0f, 0x75, 0x6a,
	0x75, 0x5f, 0x73, 0x7a, 0x73, 0x65, 0x6c, 0x32, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x12, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2e,
	0x55, 0x4a, 0x55, 0x5f, 0x53, 0x5a, 0x53, 0x45, 0x4c, 0x32, 0x5f, 0x54, 0x69, 0x63, 0x6b, 0x52,
	0x0d, 0x75, 0x6a, 0x75, 0x53, 0x7a, 0x73, 0x65, 0x6c, 0x32, 0x54, 0x69, 0x63, 0x6b, 0x22, 0xf7,
	0x03, 0x0a, 0x13, 0x55, 0x4a, 0x55, 0x5f, 0x54, 0x44, 0x46, 0x5f, 0x42, 0x42, 0x51, 0x42, 0x49,
	0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x64, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x64, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x62, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x62, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x69, 0x64, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x69, 0x64,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x69, 0x64, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x62, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x73, 0x42, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69,
	0x73, 0x42, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x69, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x69,
	0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09,
	0x62, 0x69, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x62, 0x69, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x66,
	0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6f, 0x66,
	0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x66, 0x72, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6f, 0x66, 0x72, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x66, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x66,
	0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x73, 0x4f, 0x66, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x73, 0x4f,
	0x66, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x66, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x66, 0x72, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x66,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f,
	0x66, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa6, 0x02, 0x0a, 0x16, 0x55, 0x4a, 0x55,
	0x5f, 0x54, 0x44, 0x46, 0x5f, 0x42, 0x42, 0x51, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x64, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x6c, 0x61,
	0x67, 0x22, 0x94, 0x02, 0x0a, 0x14, 0x55, 0x4a, 0x55, 0x5f, 0x54, 0x44, 0x46, 0x5f, 0x42, 0x52,
	0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x69,
	0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x69,
	0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x6b, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x73, 0x6b, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x73, 0x6b, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x61, 0x73, 0x6b, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x62, 0x69, 0x64, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x62, 0x69, 0x64, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x73, 0x6b, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x09, 0x61, 0x73, 0x6b, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x69,
	0x64, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x62,
	0x69, 0x64, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x22, 0xe1, 0x05, 0x0a, 0x13, 0x55, 0x4a, 0x55,
	0x5f, 0x54, 0x44, 0x46, 0x5f, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x12, 0x1a, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72,
	0x65, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x69, 0x67, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68,
	0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6c,
	0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c,
	0x6f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x69, 0x67, 0x68,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x68,
	0x69, 0x67, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f,
	0x77, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72,
	0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x72, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x75, 0x72, 0x72, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x17, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x18, 0x18, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x06, 0x61, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x64, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x19, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x62, 0x69, 0x64, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x18, 0x1a,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x62, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x22, 0x88, 0x03, 0x0a,
	0x12, 0x55, 0x4a, 0x55, 0x5f, 0x54, 0x44, 0x46, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x68,
	0x69, 0x67, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x68, 0x69, 0x67, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x77,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x6f, 0x77,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65,
	0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65,
	0x72, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x5b, 0x0a, 0x19, 0x55, 0x4a, 0x55, 0x5f, 0x54,
	0x44, 0x46, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f,
	0x44, 0x41, 0x54, 0x41, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x22, 0x83, 0x08, 0x0a, 0x13, 0x55, 0x4a, 0x55, 0x5f, 0x54, 0x44, 0x46,
	0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x12, 0x1a, 0x0a, 0x08,
	0x77, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x77, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x65, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f,
	0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06,
	0x61, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x64, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x62, 0x69, 0x64, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x06, 0x62, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x75,
	0x6d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e,
	0x75, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x12, 0x20,
	0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x73, 0x6b, 0x56, 0x6f, 0x6c,
	0x12, 0x30, 0x0a, 0x13, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x41, 0x76, 0x67, 0x42,
	0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x41, 0x76, 0x67, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x41, 0x76,
	0x67, 0x41, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x41, 0x76, 0x67, 0x41, 0x73, 0x6b, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x4f, 0x50, 0x56, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x49, 0x4f, 0x50, 0x56, 0x12, 0x28, 0x0a, 0x0f, 0x79, 0x69, 0x65, 0x6c,
	0x64, 0x54, 0x6f, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x6f, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x69, 0x67, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x68, 0x69, 0x67, 0x68, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x79, 0x6c, 0x31, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x79, 0x6c, 0x31,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x79, 0x6c, 0x32, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x73, 0x79, 0x6c, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x44, 0x32, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x53, 0x44, 0x32, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x6e, 0x65, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x6e, 0x65, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x77, 0x6f, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x77, 0x6f, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x66, 0x6f, 0x75, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x66, 0x6f, 0x75, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x66, 0x69, 0x76, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x66, 0x69, 0x76, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x22, 0xef, 0x01, 0x0a, 0x13, 0x55,
	0x4a, 0x55, 0x5f, 0x54, 0x44, 0x46, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45,
	0x55, 0x45, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x42, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x41, 0x42, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x41, 0x42, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x08, 0x41, 0x42, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0xf7, 0x01, 0x0a,
	0x0d, 0x55, 0x4a, 0x55, 0x5f, 0x54, 0x44, 0x46, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x12, 0x1a,
	0x0a, 0x08, 0x77, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x77, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4b, 0x69, 0x6e,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xe9, 0x02, 0x0a, 0x13, 0x55, 0x4a, 0x55, 0x5f, 0x54,
	0x44, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x1a,
	0x0a, 0x08, 0x77, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x77, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x42, 0x53, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x42, 0x53, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x73,
	0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x73,
	0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x64, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x69, 0x64, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x22, 0xc3, 0x1b, 0x0a, 0x11, 0x55, 0x4a, 0x55, 0x5f, 0x53, 0x5a, 0x53, 0x45, 0x4c,
	0x32, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x24, 0x0a, 0x0d, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x22,
	0x0a, 0x0c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x45, 0x4e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x45, 0x4e, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x53, 0x49, 0x4e, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x53, 0x49, 0x4e, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x55, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x12, 0x3e,
	0x0a, 0x1a, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x49, 0x44, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1a, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x44, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x54, 0x61, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x61, 0x67,
	0x12, 0x24, 0x0a, 0x0d, 0x50, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x50, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4c, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x50, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x64, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x53, 0x68, 0x61, 0x72, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10,
	0x4f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x59, 0x65, 0x61, 0x72, 0x45,
	0x50, 0x53, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x50, 0x72, 0x65, 0x59, 0x65, 0x61,
	0x72, 0x45, 0x50, 0x53, 0x12, 0x18, 0x0a, 0x07, 0x59, 0x65, 0x61, 0x72, 0x45, 0x50, 0x53, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x59, 0x65, 0x61, 0x72, 0x45, 0x50, 0x53, 0x12, 0x22,
	0x0a, 0x0c, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x4e, 0x41, 0x56, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x03, 0x4e, 0x41, 0x56, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x61,
	0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x12, 0x30, 0x0a, 0x13, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x41, 0x63, 0x63, 0x72,
	0x75, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x41, 0x63, 0x63, 0x72, 0x75, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0f, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x61,
	0x6c, 0x6c, 0x4f, 0x72, 0x50, 0x75, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43,
	0x61, 0x6c, 0x6c, 0x4f, 0x72, 0x50, 0x75, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x57, 0x61, 0x72, 0x72,
	0x61, 0x6e, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x57, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x74, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x79, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x61, 0x79, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x61, 0x79, 0x54, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x61, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x47, 0x61, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1a,
	0x0a, 0x08, 0x47, 0x61, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x47, 0x61, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x72,
	0x64, 0x42, 0x75, 0x79, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x43, 0x72, 0x64, 0x42, 0x75, 0x79, 0x55, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x72, 0x64, 0x53, 0x65, 0x6c,
	0x6c, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x43, 0x72, 0x64, 0x53, 0x65, 0x6c, 0x6c, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x79, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x72, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x43, 0x72, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x2e, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61,
	0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x2f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4d, 0x61,
	0x6b, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1a,
	0x0a, 0x08, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x6f, 0x74, 0x18, 0x31, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x6f, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x69,
	0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x54, 0x69,
	0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x42, 0x75, 0x79, 0x51, 0x74, 0x79,
	0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x10, 0x42, 0x75, 0x79, 0x51, 0x74, 0x79, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x65, 0x6c, 0x6c, 0x51, 0x74, 0x79, 0x55, 0x70, 0x70,
	0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x53,
	0x65, 0x6c, 0x6c, 0x51, 0x74, 0x79, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x42, 0x75, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x42, 0x75, 0x79, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x65, 0x6c, 0x6c, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e,
	0x53, 0x65, 0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x55, 0x70, 0x52, 0x61, 0x74, 0x65, 0x4f, 0x18, 0x37,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x55, 0x70, 0x52, 0x61, 0x74,
	0x65, 0x4f, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x52,
	0x61, 0x74, 0x65, 0x4f, 0x18, 0x38, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x44, 0x6f, 0x77, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x4f, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x55, 0x70, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x4f, 0x18, 0x39,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x55, 0x70, 0x41, 0x62, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x65, 0x4f, 0x12, 0x2e, 0x0a, 0x12, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44,
	0x6f, 0x77, 0x6e, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x4f, 0x18, 0x3a, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x12, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x41, 0x62, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x65, 0x4f, 0x12, 0x2e, 0x0a, 0x12, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x70, 0x44, 0x6f, 0x77, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x4f, 0x18, 0x3b, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x12, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x44, 0x6f, 0x77,
	0x6e, 0x52, 0x61, 0x74, 0x65, 0x4f, 0x12, 0x36, 0x0a, 0x16, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x70, 0x44, 0x6f, 0x77, 0x6e, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x4f,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x70, 0x44, 0x6f, 0x77, 0x6e, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x4f, 0x12, 0x22,
	0x0a, 0x0c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x55, 0x70, 0x52, 0x61, 0x74, 0x65, 0x54, 0x18, 0x3d,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x55, 0x70, 0x52, 0x61, 0x74,
	0x65, 0x54, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x52,
	0x61, 0x74, 0x65, 0x54, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x44, 0x6f, 0x77, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x54, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x55, 0x70, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x54, 0x18, 0x3f,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x55, 0x70, 0x41, 0x62, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x65, 0x54, 0x12, 0x2e, 0x0a, 0x12, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44,
	0x6f, 0x77, 0x6e, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x54, 0x18, 0x40, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x12, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x41, 0x62, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x65, 0x54, 0x12, 0x2e, 0x0a, 0x12, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x70, 0x44, 0x6f, 0x77, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x54, 0x18, 0x41, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x12, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x44, 0x6f, 0x77,
	0x6e, 0x52, 0x61, 0x74, 0x65, 0x54, 0x12, 0x36, 0x0a, 0x16, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x70, 0x44, 0x6f, 0x77, 0x6e, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x54,
	0x18, 0x42, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x70, 0x44, 0x6f, 0x77, 0x6e, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x54, 0x12, 0x22,
	0x0a, 0x0c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x55, 0x70, 0x52, 0x61, 0x74, 0x65, 0x43, 0x18, 0x43,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x55, 0x70, 0x52, 0x61, 0x74,
	0x65, 0x43, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x52,
	0x61, 0x74, 0x65, 0x43, 0x18, 0x44, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x44, 0x6f, 0x77, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x43, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x55, 0x70, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x43, 0x18, 0x45,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x55, 0x70, 0x41, 0x62, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x65, 0x43, 0x12, 0x2e, 0x0a, 0x12, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44,
	0x6f, 0x77, 0x6e, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x43, 0x18, 0x46, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x12, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x41, 0x62, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x65, 0x43, 0x12, 0x2e, 0x0a, 0x12, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x70, 0x44, 0x6f, 0x77, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x43, 0x18, 0x47, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x12, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x44, 0x6f, 0x77,
	0x6e, 0x52, 0x61, 0x74, 0x65, 0x43, 0x12, 0x36, 0x0a, 0x16, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x70, 0x44, 0x6f, 0x77, 0x6e, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x43,
	0x18, 0x48, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x70, 0x44, 0x6f, 0x77, 0x6e, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x43, 0x12, 0x1c,
	0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x49, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x12,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x6f,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x6f,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x65, 0x64, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x4d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x56, 0x6f,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x78, 0x18, 0x4e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x45, 0x78, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x49, 0x73, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73,
	0x56, 0x49, 0x45, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x49, 0x73, 0x56, 0x49, 0x45,
	0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x6b, 0x74, 0x42, 0x75, 0x79, 0x51, 0x74, 0x79, 0x55, 0x70, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x51, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x4d, 0x6b, 0x74, 0x42,
	0x75, 0x79, 0x51, 0x74, 0x79, 0x55, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x11,
	0x4d, 0x6b, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x51, 0x74, 0x79, 0x55, 0x70, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x52, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x4d, 0x6b, 0x74, 0x53, 0x65, 0x6c, 0x6c,
	0x51, 0x74, 0x79, 0x55, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x6b,
	0x74, 0x42, 0x75, 0x79, 0x51, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x53, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x4d, 0x6b, 0x74, 0x42, 0x75, 0x79, 0x51, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74,
	0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x6b, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x51, 0x74, 0x79, 0x55, 0x6e,
	0x69, 0x74, 0x18, 0x54, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x4d, 0x6b, 0x74, 0x53, 0x65, 0x6c,
	0x6c, 0x51, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x38, 0x0a, 0x17, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x75, 0x79, 0x51, 0x74, 0x79, 0x55, 0x70, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x55, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x75, 0x79, 0x51, 0x74, 0x79, 0x55, 0x70, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x46, 0x69, 0x78, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x53, 0x65, 0x6c, 0x6c, 0x51, 0x74, 0x79, 0x55, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x56,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x46, 0x69, 0x78, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x53, 0x65, 0x6c, 0x6c, 0x51, 0x74, 0x79, 0x55, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x32,
	0x0a, 0x14, 0x46, 0x69, 0x78, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x75, 0x79, 0x51,
	0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x57, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x75, 0x79, 0x51, 0x74, 0x79, 0x55, 0x6e,
	0x69, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x46, 0x69, 0x78, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x53, 0x65, 0x6c, 0x6c, 0x51, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x58, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x15, 0x46, 0x69, 0x78, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x65, 0x6c,
	0x6c, 0x51, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x22, 0xfe, 0x1a, 0x0a, 0x10, 0x55, 0x4a, 0x55,
	0x5f, 0x53, 0x53, 0x45, 0x4c, 0x32, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x12, 0x26, 0x0a,
	0x0e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x12, 0x52, 0x0f, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x53, 0x49, 0x4e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x53, 0x49, 0x4e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x45, 0x4e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x45,
	0x4e, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x55, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x79, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a,
	0x0a, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x43, 0x46, 0x49, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x43, 0x46, 0x49, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x50, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x50, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61,
	0x64, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0a, 0x54,
	0x72, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x42,
	0x75, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x42, 0x75, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x65, 0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x53, 0x65, 0x6c, 0x6c, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x44, 0x65, 0x63,
	0x6c, 0x61, 0x72, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x14, 0x44, 0x65, 0x63,
	0x6c, 0x61, 0x72, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x65, 0x69, 0x6c, 0x69, 0x6e,
	0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x65, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a,
	0x0d, 0x50, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x50, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x69, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x54, 0x69, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x55, 0x70, 0x44, 0x6f, 0x77, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x55, 0x70, 0x44, 0x6f, 0x77, 0x6e,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x55, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x55, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x6f, 0x77, 0x6e,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x58, 0x52, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x58, 0x52, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12,
	0x1a, 0x0a, 0x08, 0x58, 0x44, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x58, 0x44, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x43,
	0x72, 0x64, 0x42, 0x75, 0x79, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x43, 0x72, 0x64, 0x42, 0x75, 0x79, 0x55, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x72, 0x64, 0x53, 0x65,
	0x6c, 0x6c, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x43, 0x72, 0x64, 0x53, 0x65, 0x6c, 0x6c, 0x55, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x79, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4e, 0x6f, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4e, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x41, 0x76, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x41, 0x76, 0x67, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x76, 0x67, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61,
	0x6c, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x41, 0x76, 0x67, 0x43, 0x61, 0x70, 0x69,
	0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x18, 0x26, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x50, 0x45, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x50, 0x45, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x47,
	0x61, 0x67, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x47, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79,
	0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x72, 0x64, 0x42, 0x75, 0x79, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x43, 0x72, 0x64, 0x42,
	0x75, 0x79, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x72, 0x64,
	0x53, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x43, 0x72, 0x64, 0x53, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12,
	0x24, 0x0a, 0x0d, 0x4d, 0x6b, 0x74, 0x4f, 0x72, 0x64, 0x43, 0x65, 0x69, 0x6c, 0x69, 0x6e, 0x67,
	0x18, 0x2d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x4d, 0x6b, 0x74, 0x4f, 0x72, 0x64, 0x43, 0x65,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x6b, 0x74, 0x4f, 0x72, 0x64, 0x46,
	0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x4d, 0x6b, 0x74, 0x4f,
	0x72, 0x64, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x4f, 0x75, 0x74, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x68, 0x61, 0x72, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x10, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x43, 0x68, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x13, 0x43, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x68, 0x67, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x44, 0x52, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x43, 0x44, 0x52, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x43, 0x44, 0x52, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x42, 0x61, 0x73,
	0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x43, 0x44, 0x52, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x42, 0x61, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x55, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x79, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x42, 0x61, 0x73, 0x65,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x42, 0x61, 0x73, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x4e, 0x61, 0x6d, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x18,
	0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4e, 0x61, 0x6d, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x79, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x44, 0x61, 0x79, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x44, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x12, 0x28, 0x0a,
	0x0f, 0x47, 0x44, 0x52, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x47, 0x44, 0x52, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x47, 0x44, 0x52, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x4e, 0x6f, 0x18, 0x3a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x44, 0x52, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x73, 0x4e, 0x6f, 0x12, 0x3a, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x4e, 0x6f, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x4e, 0x6f, 0x12, 0x32, 0x0a, 0x14, 0x4e, 0x65, 0x77, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x4e, 0x65, 0x77, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4e, 0x65, 0x77, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x4e, 0x65, 0x77, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x47, 0x44, 0x52, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x47, 0x44, 0x52, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x3f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x40, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x45, 0x44, 0x4f, 0x4c, 0x18, 0x42, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x53, 0x45, 0x44, 0x4f, 0x4c, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x4f, 0x70,
	0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x43, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x50,
	0x72, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x50,
	0x72, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x42, 0x75, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x30,
	0x31, 0x18, 0x44, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x50, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x42, 0x75, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x30, 0x31, 0x12, 0x30, 0x0a, 0x13, 0x53,
	0x79, 0x62, 0x55, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x45, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x53, 0x79, 0x62, 0x55, 0x6e, 0x64,
	0x50, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a,
	0x13, 0x50, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x30, 0x31, 0x18, 0x46, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x50, 0x72, 0x65, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x30, 0x31, 0x12,
	0x26, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x47, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x50, 0x72, 0x65, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x48, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0e, 0x50, 0x72, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x6f, 0x18, 0x49, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x50, 0x72, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x6f, 0x12,
	0x22, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x4a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x50, 0x72, 0x65, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x50, 0x72, 0x65, 0x4c, 0x6f, 0x77,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x50, 0x72, 0x65, 0x4e, 0x6f, 0x6e, 0x41,
	0x75, 0x74, 0x6f, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x4c, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x13, 0x50, 0x72, 0x65, 0x4e, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x6f, 0x48, 0x69,
	0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x50, 0x72, 0x65, 0x4e, 0x6f,
	0x6e, 0x41, 0x75, 0x74, 0x6f, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x4d, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x12, 0x50, 0x72, 0x65, 0x4e, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x6f, 0x4c,
	0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x59, 0x65, 0x61, 0x72, 0x48,
	0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x59, 0x65, 0x61, 0x72, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a,
	0x11, 0x44, 0x61, 0x74, 0x65, 0x59, 0x65, 0x61, 0x72, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x44, 0x61, 0x74, 0x65, 0x59, 0x65,
	0x61, 0x72, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x59,
	0x65, 0x61, 0x72, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x59, 0x65, 0x61, 0x72, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x65, 0x59, 0x65, 0x61, 0x72, 0x4c, 0x6f, 0x77, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x51, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x44, 0x61, 0x74, 0x65, 0x59,
	0x65, 0x61, 0x72, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x59,
	0x65, 0x61, 0x72, 0x4e, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x6f, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x52, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x59, 0x65, 0x61, 0x72, 0x4e,
	0x6f, 0x6e, 0x41, 0x75, 0x74, 0x6f, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x3a, 0x0a, 0x18, 0x44, 0x61, 0x74, 0x65, 0x59, 0x65, 0x61, 0x72, 0x4e, 0x6f, 0x6e, 0x41, 0x75,
	0x74, 0x6f, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x53, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x18, 0x44, 0x61, 0x74, 0x65, 0x59, 0x65, 0x61, 0x72, 0x4e, 0x6f, 0x6e, 0x41, 0x75,
	0x74, 0x6f, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x59,
	0x65, 0x61, 0x72, 0x4e, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x6f, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x54, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x59, 0x65, 0x61, 0x72, 0x4e, 0x6f,
	0x6e, 0x41, 0x75, 0x74, 0x6f, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a,
	0x17, 0x44, 0x61, 0x74, 0x65, 0x59, 0x65, 0x61, 0x72, 0x4e, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x6f,
	0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x55, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17,
	0x44, 0x61, 0x74, 0x65, 0x59, 0x65, 0x61, 0x72, 0x4e, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x6f, 0x4c,
	0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x41, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x56, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x50, 0x72, 0x65, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x45, 0x78, 0x18, 0x57, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x78, 0x22, 0x82, 0x1b, 0x0a, 0x14, 0x55, 0x4a,
	0x55, 0x5f, 0x53, 0x53, 0x45, 0x4c, 0x32, 0x5f, 0x42, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x28, 0x0a, 0x0f, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0f, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x53, 0x49, 0x4e, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x53, 0x49, 0x4e, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x45, 0x4e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x45, 0x4e, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69,
	0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x46, 0x49, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x46, 0x49, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53,
	0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x50, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x12, 0x18,
	0x0a, 0x07, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4c,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x65,
	0x74, 0x4e, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x65, 0x74, 0x4e, 0x6f,
	0x12, 0x24, 0x0a, 0x0d, 0x42, 0x75, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x42, 0x75, 0x79, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x65, 0x6c, 0x6c, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x53, 0x65, 0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x2e,
	0x0a, 0x12, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x46,
	0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x44, 0x65, 0x63, 0x6c,
	0x61, 0x72, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x32,
	0x0a, 0x14, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43,
	0x65, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x44, 0x65,
	0x63, 0x6c, 0x61, 0x72, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x65, 0x69, 0x6c, 0x69,
	0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x50, 0x72, 0x65, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x69, 0x63, 0x6b,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x54, 0x69, 0x63, 0x6b,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x55, 0x70, 0x44, 0x6f, 0x77, 0x6e, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x55,
	0x70, 0x44, 0x6f, 0x77, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x55, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x55, 0x70, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x44, 0x6f, 0x77, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x58, 0x52,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x58, 0x52, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x58, 0x44, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x58, 0x44, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2a, 0x0a, 0x10, 0x43, 0x72, 0x64, 0x42, 0x75, 0x79, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x79, 0x69, 0x6e, 0x67, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x43, 0x72, 0x64, 0x42,
	0x75, 0x79, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x11,
	0x43, 0x72, 0x64, 0x53, 0x65, 0x6c, 0x6c, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e,
	0x67, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x43, 0x72, 0x64, 0x53, 0x65, 0x6c, 0x6c,
	0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4e, 0x6f, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4e, 0x6f, 0x12, 0x26,
	0x0a, 0x0e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x41, 0x76, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x41, 0x76,
	0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x76, 0x67, 0x43,
	0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x41, 0x76,
	0x67, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x10, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x26, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x12, 0x24, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x50, 0x45, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x18, 0x27, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x50,
	0x45, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x47, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69,
	0x6e, 0x67, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x47, 0x61, 0x67, 0x65, 0x55, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x72, 0x64, 0x42,
	0x75, 0x79, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0d, 0x43, 0x72, 0x64, 0x42, 0x75, 0x79, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x43, 0x72, 0x64, 0x53, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18,
	0x2c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x43, 0x72, 0x64, 0x53, 0x65, 0x6c, 0x6c, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x6b, 0x74, 0x4f, 0x72, 0x64, 0x43, 0x65,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x4d, 0x6b, 0x74,
	0x4f, 0x72, 0x64, 0x43, 0x65, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x6b,
	0x74, 0x4f, 0x72, 0x64, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x4d, 0x6b, 0x74, 0x4f, 0x72, 0x64, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x10,
	0x4f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x18, 0x2f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x75, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x68, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x30, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x43, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x43, 0x68, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x44,
	0x52, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x31, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x44, 0x52, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x44, 0x52, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x74, 0x42, 0x61, 0x73, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x43, 0x44,
	0x52, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x42, 0x61, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x15,
	0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x42, 0x61, 0x73, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x55, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x42, 0x61,
	0x73, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x4e, 0x61, 0x6d, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x79, 0x69, 0x6e, 0x67, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4e, 0x61, 0x6d, 0x65,
	0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x35, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x18, 0x38, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x47, 0x44, 0x52, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x47, 0x44, 0x52,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x44, 0x52, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73,
	0x4e, 0x6f, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x47, 0x44, 0x52, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x4e, 0x6f, 0x12, 0x3a, 0x0a, 0x18,
	0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18,
	0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x12, 0x32, 0x0a, 0x14, 0x4e, 0x65, 0x77, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x4e, 0x65, 0x77, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x4e, 0x65, 0x77, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4e, 0x65, 0x77, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x47, 0x44, 0x52, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x47, 0x44, 0x52, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x2c,
	0x0a, 0x11, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x41,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x45, 0x44, 0x4f, 0x4c, 0x18,
	0x42, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x45, 0x44, 0x4f, 0x4c, 0x12, 0x22, 0x0a, 0x0c,
	0x50, 0x72, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x43, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x50, 0x72, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x2e, 0x0a, 0x12, 0x50, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x42, 0x75, 0x79, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x30, 0x31, 0x18, 0x44, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x50, 0x72,
	0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x42, 0x75, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x30, 0x31,
	0x12, 0x30, 0x0a, 0x13, 0x53, 0x79, 0x62, 0x55, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x45, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x53,
	0x79, 0x62, 0x55, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x50, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x65,
	0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x30, 0x31, 0x18, 0x46, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x13, 0x50, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x30, 0x31, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x47, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x50, 0x72,
	0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x50, 0x72, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x48,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x50, 0x72, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x4e, 0x6f, 0x18, 0x49, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x50, 0x72, 0x65, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x4e, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x48, 0x69, 0x67, 0x68, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x50, 0x72, 0x65, 0x48,
	0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x4c,
	0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x50,
	0x72, 0x65, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x50, 0x72,
	0x65, 0x4e, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x6f, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x50, 0x72, 0x65, 0x4e, 0x6f, 0x6e, 0x41,
	0x75, 0x74, 0x6f, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x12,
	0x50, 0x72, 0x65, 0x4e, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x6f, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x50, 0x72, 0x65, 0x4e, 0x6f, 0x6e,
	0x41, 0x75, 0x74, 0x6f, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x59, 0x65, 0x61, 0x72, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x4e, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x59, 0x65, 0x61, 0x72, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x44, 0x61, 0x74, 0x65, 0x59, 0x65, 0x61, 0x72, 0x48, 0x69,
	0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x44,
	0x61, 0x74, 0x65, 0x59, 0x65, 0x61, 0x72, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x59, 0x65, 0x61, 0x72, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x50, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x59, 0x65, 0x61, 0x72, 0x4c, 0x6f, 0x77, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x65, 0x59, 0x65, 0x61, 0x72,
	0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x51, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x44, 0x61, 0x74, 0x65, 0x59, 0x65, 0x61, 0x72, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x32, 0x0a, 0x14, 0x59, 0x65, 0x61, 0x72, 0x4e, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x6f, 0x48,
	0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x52, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14,
	0x59, 0x65, 0x61, 0x72, 0x4e, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x6f, 0x48, 0x69, 0x67, 0x68, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x44, 0x61, 0x74, 0x65, 0x59, 0x65, 0x61, 0x72,
	0x4e, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x6f, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x53, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x44, 0x61, 0x74, 0x65, 0x59, 0x65, 0x61, 0x72,
	0x4e, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x6f, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x30, 0x0a, 0x13, 0x59, 0x65, 0x61, 0x72, 0x4e, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x6f, 0x4c,
	0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x54, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x59,
	0x65, 0x61, 0x72, 0x4e, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x6f, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x44, 0x61, 0x74, 0x65, 0x59, 0x65, 0x61, 0x72, 0x4e, 0x6f,
	0x6e, 0x41, 0x75, 0x74, 0x6f, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x55, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x17, 0x44, 0x61, 0x74, 0x65, 0x59, 0x65, 0x61, 0x72, 0x4e, 0x6f, 0x6e,
	0x41, 0x75, 0x74, 0x6f, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x50, 0x72, 0x65, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x56, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x50, 0x72, 0x65, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x78, 0x18, 0x57, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x78, 0x22, 0xd5,
	0x03, 0x0a, 0x15, 0x55, 0x4a, 0x55, 0x5f, 0x53, 0x53, 0x45, 0x4c, 0x32, 0x5f, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x24, 0x0a, 0x0d, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x12, 0x52,
	0x0f, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x52, 0x65, 0x63, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x52,
	0x65, 0x63, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x75, 0x79, 0x52, 0x65, 0x63, 0x49, 0x44,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x42, 0x75, 0x79, 0x52, 0x65, 0x63, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x63, 0x49, 0x44, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x63, 0x49, 0x44, 0x12, 0x20,
	0x0a, 0x0b, 0x42, 0x75, 0x79, 0x53, 0x65, 0x6c, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x75, 0x79, 0x53, 0x65, 0x6c, 0x6c, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x63, 0x4e, 0x4f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x52, 0x65, 0x63, 0x4e, 0x4f, 0x22, 0x87, 0x03, 0x0a, 0x0f, 0x55, 0x4a, 0x55, 0x5f, 0x53,
	0x53, 0x45, 0x4c, 0x32, 0x5f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x63, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x52, 0x65, 0x63, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x65, 0x74, 0x49,
	0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x65, 0x74, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65,
	0x63, 0x4e, 0x4f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x52, 0x65, 0x63, 0x4e, 0x4f,
	0x22, 0xce, 0x03, 0x0a, 0x12, 0x55, 0x4a, 0x55, 0x5f, 0x53, 0x53, 0x45, 0x4c, 0x32, 0x5f, 0x42,
	0x6f, 0x6e, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x24, 0x0a, 0x0d, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x1a, 0x0a, 0x08, 0x54, 0x69, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x54, 0x69, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x52,
	0x65, 0x63, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x52, 0x65, 0x63, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x63, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x54, 0x69, 0x63, 0x6b, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x69, 0x63, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x54, 0x69, 0x63, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x69, 0x63, 0x6b, 0x42, 0x53, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x69, 0x63, 0x6b, 0x42, 0x53, 0x46,
	0x6c, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x69, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x69, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x42, 0x75, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x4f, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x75, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x4f, 0x12,
	0x20, 0x0a, 0x0b, 0x53, 0x65, 0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x4f, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x53, 0x65, 0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e,
	0x4f, 0x22, 0xda, 0x02, 0x0a, 0x10, 0x55, 0x4a, 0x55, 0x5f, 0x53, 0x5a, 0x53, 0x45, 0x4c, 0x32,
	0x5f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x24,
	0x0a, 0x0d, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x65, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x53, 0x65, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65,
	0x63, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x52, 0x65, 0x63, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8e,
	0x03, 0x0a, 0x16, 0x55, 0x4a, 0x55, 0x5f, 0x53, 0x5a, 0x53, 0x45, 0x4c, 0x32, 0x5f, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x24, 0x0a, 0x0d, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x65, 0x74, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x53, 0x65, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a,
	0x05, 0x52, 0x65, 0x63, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x52, 0x65,
	0x63, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x75, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x42, 0x75, 0x79, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x53, 0x65, 0x6c, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x22, 0x0a,
	0x0c, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xa9, 0x03, 0x0a, 0x0f, 0x55, 0x4a, 0x55, 0x5f, 0x53, 0x5a, 0x53, 0x45, 0x4c, 0x32, 0x5f, 0x54,
	0x69, 0x63, 0x6b, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x65, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x53, 0x65, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x63, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x52, 0x65, 0x63, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x54, 0x69, 0x63, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x54, 0x69, 0x63, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54,
	0x69, 0x63, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x54, 0x69, 0x63, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x69, 0x63,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x69, 0x63,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x75, 0x79, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x42, 0x75, 0x79, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x6c, 0x6c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x53, 0x65, 0x6c, 0x6c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4f, 0x4f, 0x72, 0x54, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4f, 0x4f, 0x72, 0x54, 0x32, 0x45, 0x0a, 0x04, 0x54,
	0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x03, 0x51, 0x72, 0x79, 0x12, 0x1a, 0x2e, 0x6d, 0x64, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x4a, 0x55, 0x5f, 0x53, 0x5a, 0x53, 0x45, 0x4c,
	0x32, 0x5f, 0x54, 0x69, 0x63, 0x6b, 0x1a, 0x1a, 0x2e, 0x6d, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x2e, 0x55, 0x4a, 0x55, 0x5f, 0x53, 0x5a, 0x53, 0x45, 0x4c, 0x32, 0x5f, 0x54, 0x69,
	0x63, 0x6b, 0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x2f, 0x6d, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mdCurrent_proto_rawDescOnce sync.Once
	file_mdCurrent_proto_rawDescData = file_mdCurrent_proto_rawDesc
)

func file_mdCurrent_proto_rawDescGZIP() []byte {
	file_mdCurrent_proto_rawDescOnce.Do(func() {
		file_mdCurrent_proto_rawDescData = protoimpl.X.CompressGZIP(file_mdCurrent_proto_rawDescData)
	})
	return file_mdCurrent_proto_rawDescData
}

var file_mdCurrent_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_mdCurrent_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_mdCurrent_proto_goTypes = []interface{}{
	(Header_Type)(0),                  // 0: mdCurrent.Header.Type
	(LoginRespMessage_LoginResult)(0), // 1: mdCurrent.LoginRespMessage.LoginResult
	(*NettyMessage)(nil),              // 2: mdCurrent.NettyMessage
	(*Header)(nil),                    // 3: mdCurrent.Header
	(*LoginReqMessage)(nil),           // 4: mdCurrent.LoginReqMessage
	(*LoginRespMessage)(nil),          // 5: mdCurrent.LoginRespMessage
	(*BusinessReqMessage)(nil),        // 6: mdCurrent.BusinessReqMessage
	(*BusinessRespMessage)(nil),       // 7: mdCurrent.BusinessRespMessage
	(*UJU_TDF_BBQBID_DATA)(nil),       // 8: mdCurrent.UJU_TDF_BBQBID_DATA
	(*UJU_TDF_BBQTRANSACTION)(nil),    // 9: mdCurrent.UJU_TDF_BBQTRANSACTION
	(*UJU_TDF_BROKER_QUEUE)(nil),      // 10: mdCurrent.UJU_TDF_BROKER_QUEUE
	(*UJU_TDF_FUTURE_DATA)(nil),       // 11: mdCurrent.UJU_TDF_FUTURE_DATA
	(*UJU_TDF_INDEX_DATA)(nil),        // 12: mdCurrent.UJU_TDF_INDEX_DATA
	(*UJU_TDF_MARKET_CLOSE_DATA)(nil), // 13: mdCurrent.UJU_TDF_MARKET_CLOSE_DATA
	(*UJU_TDF_MARKET_DATA)(nil),       // 14: mdCurrent.UJU_TDF_MARKET_DATA
	(*UJU_TDF_ORDER_QUEUE)(nil),       // 15: mdCurrent.UJU_TDF_ORDER_QUEUE
	(*UJU_TDF_ORDER)(nil),             // 16: mdCurrent.UJU_TDF_ORDER
	(*UJU_TDF_TRANSACTION)(nil),       // 17: mdCurrent.UJU_TDF_TRANSACTION
	(*UJU_SZSEL2_STATIC)(nil),         // 18: mdCurrent.UJU_SZSEL2_STATIC
	(*UJU_SSEL2_STATIC)(nil),          // 19: mdCurrent.UJU_SSEL2_STATIC
	(*UJU_SSEL2_BondStatic)(nil),      // 20: mdCurrent.UJU_SSEL2_BondStatic
	(*UJU_SSEL2_Transaction)(nil),     // 21: mdCurrent.UJU_SSEL2_Transaction
	(*UJU_SSEL2_Order)(nil),           // 22: mdCurrent.UJU_SSEL2_Order
	(*UJU_SSEL2_BondTick)(nil),        // 23: mdCurrent.UJU_SSEL2_BondTick
	(*UJU_SZSEL2_Order)(nil),          // 24: mdCurrent.UJU_SZSEL2_Order
	(*UJU_SZSEL2_Transaction)(nil),    // 25: mdCurrent.UJU_SZSEL2_Transaction
	(*UJU_SZSEL2_Tick)(nil),           // 26: mdCurrent.UJU_SZSEL2_Tick
}
var file_mdCurrent_proto_depIdxs = []int32{
	3,  // 0: mdCurrent.NettyMessage.header:type_name -> mdCurrent.Header
	4,  // 1: mdCurrent.NettyMessage.loginReqMessage:type_name -> mdCurrent.LoginReqMessage
	5,  // 2: mdCurrent.NettyMessage.loginRespMessage:type_name -> mdCurrent.LoginRespMessage
	6,  // 3: mdCurrent.NettyMessage.businessReqMessage:type_name -> mdCurrent.BusinessReqMessage
	7,  // 4: mdCurrent.NettyMessage.businessRespMessage:type_name -> mdCurrent.BusinessRespMessage
	0,  // 5: mdCurrent.Header.type:type_name -> mdCurrent.Header.Type
	1,  // 6: mdCurrent.LoginRespMessage.loginResult:type_name -> mdCurrent.LoginRespMessage.LoginResult
	8,  // 7: mdCurrent.BusinessRespMessage.uju_tdf_bbqbid_data:type_name -> mdCurrent.UJU_TDF_BBQBID_DATA
	9,  // 8: mdCurrent.BusinessRespMessage.uju_tdf_bbqtransaction:type_name -> mdCurrent.UJU_TDF_BBQTRANSACTION
	10, // 9: mdCurrent.BusinessRespMessage.uju_tdf_broker_queue:type_name -> mdCurrent.UJU_TDF_BROKER_QUEUE
	11, // 10: mdCurrent.BusinessRespMessage.uju_tdf_future_data:type_name -> mdCurrent.UJU_TDF_FUTURE_DATA
	12, // 11: mdCurrent.BusinessRespMessage.uju_tdf_index_data:type_name -> mdCurrent.UJU_TDF_INDEX_DATA
	13, // 12: mdCurrent.BusinessRespMessage.uju_tdf_market_close_data:type_name -> mdCurrent.UJU_TDF_MARKET_CLOSE_DATA
	14, // 13: mdCurrent.BusinessRespMessage.uju_tdf_market_data:type_name -> mdCurrent.UJU_TDF_MARKET_DATA
	15, // 14: mdCurrent.BusinessRespMessage.uju_tdf_order_queue:type_name -> mdCurrent.UJU_TDF_ORDER_QUEUE
	16, // 15: mdCurrent.BusinessRespMessage.uju_tdf_order:type_name -> mdCurrent.UJU_TDF_ORDER
	17, // 16: mdCurrent.BusinessRespMessage.uju_tdf_transaction:type_name -> mdCurrent.UJU_TDF_TRANSACTION
	21, // 17: mdCurrent.BusinessRespMessage.uju_ssel2_transaction:type_name -> mdCurrent.UJU_SSEL2_Transaction
	22, // 18: mdCurrent.BusinessRespMessage.uju_ssel2_order:type_name -> mdCurrent.UJU_SSEL2_Order
	23, // 19: mdCurrent.BusinessRespMessage.uju_ssel2_bondtick:type_name -> mdCurrent.UJU_SSEL2_BondTick
	24, // 20: mdCurrent.BusinessRespMessage.uju_szsel2_order:type_name -> mdCurrent.UJU_SZSEL2_Order
	25, // 21: mdCurrent.BusinessRespMessage.uju_szsel2_transaction:type_name -> mdCurrent.UJU_SZSEL2_Transaction
	26, // 22: mdCurrent.BusinessRespMessage.uju_szsel2_tick:type_name -> mdCurrent.UJU_SZSEL2_Tick
	26, // 23: mdCurrent.Test.Qry:input_type -> mdCurrent.UJU_SZSEL2_Tick
	26, // 24: mdCurrent.Test.Qry:output_type -> mdCurrent.UJU_SZSEL2_Tick
	24, // [24:25] is the sub-list for method output_type
	23, // [23:24] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_mdCurrent_proto_init() }
func file_mdCurrent_proto_init() {
	if File_mdCurrent_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mdCurrent_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NettyMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdCurrent_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdCurrent_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginReqMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdCurrent_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginRespMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdCurrent_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessReqMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdCurrent_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessRespMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdCurrent_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UJU_TDF_BBQBID_DATA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdCurrent_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UJU_TDF_BBQTRANSACTION); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdCurrent_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UJU_TDF_BROKER_QUEUE); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdCurrent_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UJU_TDF_FUTURE_DATA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdCurrent_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UJU_TDF_INDEX_DATA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdCurrent_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UJU_TDF_MARKET_CLOSE_DATA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdCurrent_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UJU_TDF_MARKET_DATA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdCurrent_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UJU_TDF_ORDER_QUEUE); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdCurrent_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UJU_TDF_ORDER); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdCurrent_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UJU_TDF_TRANSACTION); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdCurrent_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UJU_SZSEL2_STATIC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdCurrent_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UJU_SSEL2_STATIC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdCurrent_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UJU_SSEL2_BondStatic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdCurrent_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UJU_SSEL2_Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdCurrent_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UJU_SSEL2_Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdCurrent_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UJU_SSEL2_BondTick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdCurrent_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UJU_SZSEL2_Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdCurrent_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UJU_SZSEL2_Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdCurrent_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UJU_SZSEL2_Tick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mdCurrent_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mdCurrent_proto_goTypes,
		DependencyIndexes: file_mdCurrent_proto_depIdxs,
		EnumInfos:         file_mdCurrent_proto_enumTypes,
		MessageInfos:      file_mdCurrent_proto_msgTypes,
	}.Build()
	File_mdCurrent_proto = out.File
	file_mdCurrent_proto_rawDesc = nil
	file_mdCurrent_proto_goTypes = nil
	file_mdCurrent_proto_depIdxs = nil
}
